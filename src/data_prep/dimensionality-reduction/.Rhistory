cat("\n-----------Group:", group, "-----------\n")
#number of factors and components
cat("\nNumbr of components: ", nfactors[[group]])
cat("-> fit: ", fit_PCA_rotated[[group]]$fit,"\n")
cat("-> summary:\n")
print(cum_var[[group]])
#print(fit_PCA_rotated[[group]]$Vaccounted)
}
for(group in group_list){
for(i in 1:nfactors[[group]]){
barplot(fit_PCA_rotated[[group]]$loadings[,i], main = paste("factor",group,i),las=2,cex.names=0.7)
}
}
group_gg=group_list[1]
for(i in grouped_variables[[group_gg]]){
print(paste0(i,"-"))
spiega(i)
print("   ")
}
for(i in 1:nfactors[[group_gg]]){
vals = fit_PCA_rotated[[group_gg]]$loadings[,i]
print(vals)
}
orig_vars= c(original_vars,facotor_vars)
scores_orig = list()
for (i in orig_vars)
scores_orig[[i]] = list(pisa_data[,i])
scores_orig = data.frame(scores_orig)
colnames(scores_orig) = orig_vars
head(scores_orig)
scores <- function(fit,data){
return(as.data.frame(as.matrix(data)%*%fit$loadings))
}
scores_data = list()
for(group in group_list){
scores_data[group] = list(scores(fit_PCA_rotated[[group]],pisa_data[,grouped_variables[[group]]]))
}
scores_data=data.frame(scores_data)
scores_data_final = cbind(scores_data,scores_orig)
include_dir2 = paste(root_proj_dir,"/src/include/computing_WBindex.R",sep="")
source(include_dir2) ###!!!including new file!!!###
pisa_data <- read.csv(file=dataset_dir)
#standardize the variables
transformed_data <- as.data.frame(scale(select_if(pisa_data,is.numeric)))
transformed_data$CNT <- pisa_data$CNT #adding CNT column
pisa_data <- transformed_data
rm(transformed_data)
scores_WB <- computing_scoresWB(pisa_data, root_proj_dir)
names_s = names(scores_WB)
scores_WB = data.frame(scores_WB)
colnames(scores_WB)=names_s
head(scores_WB)
scores_data_final= cbind(scores_data_final,scores_WB)
head(scores_data_final)
#write.csv("../data/pisa_scores_final.csv")
group
scores_data
group_list
orig_vars
#loaded librarires
library(dplyr)
library(psych) #for KMO test and principal()
library(car) #to apply transformations
library(MVN) #to perform multivariate gaussianity check
library(GGally) #for ggcorr
library(ggplot2)
library(elasticnet) #trying out sparse principal component analysis [spca()]
library(tidyverse)
#DIRECTORIES
root_proj_dir = "../../../"
dataset_dir = paste(root_proj_dir,"/data/pisa_data_final.csv",sep="")
include_dir = paste(root_proj_dir,"/src/include/Utilities.R",sep="")
#INCLUDING UTILITIES
source(include_dir)
#IMPORTING THE DATASET
pisa_data <- read.csv(file=dataset_dir)
colnames(pisa_data)
head(pisa_data)
pisa_data$X <- NULL
pisa_data$CREACTIV <- as.factor(round(pisa_data$CREACTIV))
pisa_data$CNT <- as.factor(pisa_data$CNT)
pisa_data$SCHLTYPE <- as.factor(pisa_data$SCHLTYPE)
head(pisa_data)
# remove PV
#pisa_data <- pisa_data %>% select(-starts_with("PV"))
# LMINS and MMINS averaged
pisa_data$LM_MINS = (pisa_data$LMINS+pisa_data$MMINS)/2
head(pisa_data)
transformed_data <- as.data.frame(scale(select_if(pisa_data,is.numeric)))
data <- transformed_data
col_names_pisa = colnames(pisa_data)
col_names_data = colnames(data)
facotor_vars <- setdiff(col_names_pisa,col_names_data)
facotor_vars # those needed to be added later
remove_vars = c("EUDMO","SWBP","GFOFAIL", "RESILIENCE", "COMPETE",  #Psychological Well-being
"PERCOOP","PERCOMP","EMOSUPS","BELONG","BEINGBULLIED", #Social Well-Being
"WEALTH","HOMEPOS","BFMJ2","BMMJ1","HISCED","HISEI", # Family: ESCS is enpough
"LMINS","MMINS" #just the average
)
original_vars = c("ESCS",
"RATCMP1",
"ICTSCH",
"ICTRES",
"ENTUSE",
"LM_MINS",
"HEDRES",
"STUBEHA",
"ATTLNACT",
"JOYREAD",
"PROAT6",
"TEACHBEHA",
"STRATIO",
"CLSIZE",
"EDUSHORT",
"STAFFSHORT"
)
grouped_variables <-list()
#list of grouped variables
grouped_variables[["Approach to ICT"]] <- c("AUTICT","COMPICT","INTICT")
grouped_variables[["Use of ICT"]] <- c("HOMESCH","USESCH")
##Teaching
grouped_variables[["Teachers' degree"]] <- c("PROAT5AB","PROAT5AM")
grouped_variables[["Teacher skill"]] <- c("TEACHINT","TEACHSUP","STIMREAD","PERFEED")
grouped_variables[["Study"]] <- c("PV1MATH","PV1READ","LM_MINS")
#groups
group_list <- names(grouped_variables)
names_grouped =c( (unlist(grouped_variables)),original_vars,facotor_vars,remove_vars)
col_names_data = colnames(pisa_data)
difference1 <- setdiff(col_names_data,names_grouped)
difference1
p_ <- GGally::print_if_interactive
#overall correlation overview
ggcorr(select_if(pisa_data, is.numeric),
label = TRUE,
label_size = 0.5)
for(group_name in group_list){
p_(ggcorr(data[,grouped_variables[[group_name]]],
label=TRUE,label_size = 2) +
ggtitle(group_name))
}
nfactors_2 <- list()
for(group in group_list){
nfactors_2[[group]] <- 1
}
soglia = 0.40
nfactors = nfactors_2
iter = 1
cum_var = list()
while(iter<5){  # it would be better to have a better check, but it's fast and works
fit_PCA_rotated <- list()
#fitting the models
for(group in group_list){
#advanced PCA
fit_PCA_rotated[[group]] <- principal(r = cor(data[,grouped_variables[[group]]]),
nfactors = nfactors[[group]],
rotate = "promax")
cum_var[[group]]=sum(fit_PCA_rotated[[group]]$Vaccounted["Proportion Var",])
}
bool = cum_var<soglia
groups_low_cumvar = names(nfactors[bool])
for(k in groups_low_cumvar )
nfactors[[k]] =nfactors[[k]] +1
iter = iter +1
}
# results
for(group in group_list){
cat("\n-----------Group:", group, "-----------\n")
#number of factors and components
cat("\nNumbr of components: ", nfactors[[group]])
cat("-> fit: ", fit_PCA_rotated[[group]]$fit,"\n")
cat("-> summary:\n")
print(cum_var[[group]])
#print(fit_PCA_rotated[[group]]$Vaccounted)
}
for(group in group_list){
for(i in 1:nfactors[[group]]){
barplot(fit_PCA_rotated[[group]]$loadings[,i], main = paste("factor",group,i),las=2,cex.names=0.7)
}
}
group_gg=group_list[1]
for(i in grouped_variables[[group_gg]]){
print(paste0(i,"-"))
spiega(i)
print("   ")
}
for(i in 1:nfactors[[group_gg]]){
vals = fit_PCA_rotated[[group_gg]]$loadings[,i]
print(vals)
}
orig_vars= c(original_vars,facotor_vars)
scores_orig = list()
for (i in orig_vars)
scores_orig[[i]] = list(pisa_data[,i])
scores_orig = data.frame(scores_orig)
colnames(scores_orig) = orig_vars
head(scores_orig)
scores <- function(fit,data){
return(as.data.frame(as.matrix(data)%*%fit$loadings))
}
scores_data = list()
for(group in group_list){
scores_data[group] = list(scores(fit_PCA_rotated[[group]],pisa_data[,grouped_variables[[group]]]))
}
scores_data=data.frame(scores_data)
colnames(scores_data)=group_list
scores_data_final = cbind(scores_data,scores_orig)
include_dir2 = paste(root_proj_dir,"/src/include/computing_WBindex.R",sep="")
source(include_dir2) ###!!!including new file!!!###
pisa_data <- read.csv(file=dataset_dir)
#standardize the variables
transformed_data <- as.data.frame(scale(select_if(pisa_data,is.numeric)))
transformed_data$CNT <- pisa_data$CNT #adding CNT column
pisa_data <- transformed_data
rm(transformed_data)
scores_WB <- computing_scoresWB(pisa_data, root_proj_dir)
names_s = names(scores_WB)
scores_WB = data.frame(scores_WB)
colnames(scores_WB)=names_s
head(scores_WB)
scores_data_final= cbind(scores_data_final,scores_WB)
head(scores_data_final)
#write.csv(scores_data_final,"../../../data/pisa_scores_final.csv")
group_gg=group_list[4]
for(i in grouped_variables[[group_gg]]){
print(paste0(i,"-"))
spiega(i)
print("   ")
}
for(i in 1:nfactors[[group_gg]]){
vals = fit_PCA_rotated[[group_gg]]$loadings[,i]
print(vals)
}
group_gg=group_list[5]
for(i in grouped_variables[[group_gg]]){
print(paste0(i,"-"))
spiega(i)
print("   ")
}
for(i in 1:nfactors[[group_gg]]){
vals = fit_PCA_rotated[[group_gg]]$loadings[,i]
print(vals)
}
#loaded librarires
library(dplyr)
library(psych) #for KMO test and principal()
library(car) #to apply transformations
library(MVN) #to perform multivariate gaussianity check
library(GGally) #for ggcorr
library(ggplot2)
library(elasticnet) #trying out sparse principal component analysis [spca()]
library(tidyverse)
#DIRECTORIES
root_proj_dir = "../../../"
dataset_dir = paste(root_proj_dir,"/data/pisa_data_final.csv",sep="")
include_dir = paste(root_proj_dir,"/src/include/Utilities.R",sep="")
#INCLUDING UTILITIES
source(include_dir)
#IMPORTING THE DATASET
pisa_data <- read.csv(file=dataset_dir)
colnames(pisa_data)
head(pisa_data)
pisa_data$X <- NULL
pisa_data$CREACTIV <- as.factor(round(pisa_data$CREACTIV))
pisa_data$CNT <- as.factor(pisa_data$CNT)
pisa_data$SCHLTYPE <- as.factor(pisa_data$SCHLTYPE)
head(pisa_data)
# remove PV
#pisa_data <- pisa_data %>% select(-starts_with("PV"))
# LMINS and MMINS averaged
pisa_data$LM_MINS = (pisa_data$LMINS+pisa_data$MMINS)/2
head(pisa_data)
transformed_data <- as.data.frame(scale(select_if(pisa_data,is.numeric)))
data <- transformed_data
col_names_pisa = colnames(pisa_data)
col_names_data = colnames(data)
facotor_vars <- setdiff(col_names_pisa,col_names_data)
facotor_vars # those needed to be added later
remove_vars = c("EUDMO","SWBP","GFOFAIL", "RESILIENCE", "COMPETE",  #Psychological Well-being
"PERCOOP","PERCOMP","EMOSUPS","BELONG","BEINGBULLIED", #Social Well-Being
"WEALTH","HOMEPOS","BFMJ2","BMMJ1","HISCED","HISEI", # Family: ESCS is enpough
"LMINS","MMINS" #just the average
)
original_vars = c("ESCS",
"RATCMP1",
"ICTSCH",
"ICTRES",
"ENTUSE",
"LM_MINS",
"HEDRES",
"STUBEHA",
"ATTLNACT",
"JOYREAD",
"PROAT6",
"TEACHBEHA",
"STRATIO",
"CLSIZE",
"EDUSHORT",
"STAFFSHORT",
"PV1MATH","PV1READ"
)
grouped_variables <-list()
#list of grouped variables
grouped_variables[["Approach to ICT"]] <- c("AUTICT","COMPICT","INTICT")
grouped_variables[["Use of ICT"]] <- c("HOMESCH","USESCH")
##Teaching
grouped_variables[["Teachers' degree"]] <- c("PROAT5AB","PROAT5AM")
grouped_variables[["Teacher skill"]] <- c("TEACHINT","TEACHSUP","STIMREAD","PERFEED")
#groups
group_list <- names(grouped_variables)
names_grouped =c( (unlist(grouped_variables)),original_vars,facotor_vars,remove_vars)
col_names_data = colnames(pisa_data)
difference1 <- setdiff(col_names_data,names_grouped)
difference1
p_ <- GGally::print_if_interactive
#overall correlation overview
ggcorr(select_if(pisa_data, is.numeric),
label = TRUE,
label_size = 0.5)
for(group_name in group_list){
p_(ggcorr(data[,grouped_variables[[group_name]]],
label=TRUE,label_size = 2) +
ggtitle(group_name))
}
nfactors_2 <- list()
for(group in group_list){
nfactors_2[[group]] <- 1
}
soglia = 0.40
nfactors = nfactors_2
iter = 1
cum_var = list()
while(iter<5){  # it would be better to have a better check, but it's fast and works
fit_PCA_rotated <- list()
#fitting the models
for(group in group_list){
#advanced PCA
fit_PCA_rotated[[group]] <- principal(r = cor(data[,grouped_variables[[group]]]),
nfactors = nfactors[[group]],
rotate = "promax")
cum_var[[group]]=sum(fit_PCA_rotated[[group]]$Vaccounted["Proportion Var",])
}
bool = cum_var<soglia
groups_low_cumvar = names(nfactors[bool])
for(k in groups_low_cumvar )
nfactors[[k]] =nfactors[[k]] +1
iter = iter +1
}
# results
for(group in group_list){
cat("\n-----------Group:", group, "-----------\n")
#number of factors and components
cat("\nNumbr of components: ", nfactors[[group]])
cat("-> fit: ", fit_PCA_rotated[[group]]$fit,"\n")
cat("-> summary:\n")
print(cum_var[[group]])
#print(fit_PCA_rotated[[group]]$Vaccounted)
}
for(group in group_list){
for(i in 1:nfactors[[group]]){
barplot(fit_PCA_rotated[[group]]$loadings[,i], main = paste("factor",group,i),las=2,cex.names=0.7)
}
}
group_gg=group_list[5]
for(i in grouped_variables[[group_gg]]){
print(paste0(i,"-"))
spiega(i)
print("   ")
}
for(i in 1:nfactors[[group_gg]]){
vals = fit_PCA_rotated[[group_gg]]$loadings[,i]
print(vals)
}
orig_vars= c(original_vars,facotor_vars)
scores_orig = list()
for (i in orig_vars)
scores_orig[[i]] = list(pisa_data[,i])
scores_orig = data.frame(scores_orig)
colnames(scores_orig) = orig_vars
head(scores_orig)
scores <- function(fit,data){
return(as.data.frame(as.matrix(data)%*%fit$loadings))
}
scores_data = list()
for(group in group_list){
scores_data[group] = list(scores(fit_PCA_rotated[[group]],pisa_data[,grouped_variables[[group]]]))
}
scores_data=data.frame(scores_data)
colnames(scores_data)=group_list
scores_data_final = cbind(scores_data,scores_orig)
include_dir2 = paste(root_proj_dir,"/src/include/computing_WBindex.R",sep="")
source(include_dir2) ###!!!including new file!!!###
pisa_data <- read.csv(file=dataset_dir)
#standardize the variables
transformed_data <- as.data.frame(scale(select_if(pisa_data,is.numeric)))
transformed_data$CNT <- pisa_data$CNT #adding CNT column
pisa_data <- transformed_data
rm(transformed_data)
scores_WB <- computing_scoresWB(pisa_data, root_proj_dir)
names_s = names(scores_WB)
scores_WB = data.frame(scores_WB)
colnames(scores_WB)=names_s
head(scores_WB)
scores_data_final= cbind(scores_data_final,scores_WB)
head(scores_data_final)
head(pisa_data)
#IMPORTING THE DATASET
pisa_data <- read.csv(file=dataset_dir)
head(pisa_data)
write.csv(scores_data_final,"../../../data/pisa_scores_final.csv")
root_proj_dir = "../../../"
dataset_path = paste(root_proj_dir,"data/pisa_scores_final.csv",sep="")
include_path = paste(root_proj_dir,"src/include/Utilities.R",sep="")
#INCLUDING UTILITIES
source(include_path)
root_proj_dir = "../../"
dataset_path = paste(root_proj_dir,"data/pisa_scores_final.csv",sep="")
include_path = paste(root_proj_dir,"src/include/Utilities.R",sep="")
#INCLUDING UTILITIES
source(include_path)
#IMPORTING THE DATASET
data <- read.csv(file=dataset_path)
library(mvtnorm)
library(MASS)
library(car)
library(rgl)
library(leaps)
library(ISLR)
library(glmnet)
library(lme4)
library(nlmeU) ## --> for the dataset
library(nlme)  ## --> for models implementation
library(corrplot)
library(lattice)
library(plot.matrix)
library(insight)
head(data)
data$X <- NULL
head(data)
head(data)
data$X <- NULL
data$SCHLTYPE <- as.factor(data$SCHLTYPE)
data$CNT <- as.factor(data$CNT)
root_proj_dir = "../../"
dataset_path = paste(root_proj_dir,"data/pisa_scores_final.csv",sep="")
include_path = paste(root_proj_dir,"src/include/Utilities.R",sep="")
#INCLUDING UTILITIES
source(include_path)
#IMPORTING THE DATASET
data <- read.csv(file=dataset_path)
library(mvtnorm)
library(MASS)
library(car)
library(rgl)
library(leaps)
library(ISLR)
library(glmnet)
library(lme4)
library(nlmeU) ## --> for the dataset
library(nlme)  ## --> for models implementation
library(corrplot)
library(lattice)
library(plot.matrix)
library(insight)
head(data)
colnames(data)
data$X <- NULL
data$SCHLTYPE <- as.factor(data$SCHLTYPE)
data$CNT <- as.factor(data$CNT)
IM_PUBLIC = rep(0,dim(data)[1])
IM_PUBLIC [which(data$SCHLTYPE=="Public")] = 1
data$IM_PUBLIC = as.factor(IM_PUBLIC)
fit_social = lm(Social.well.being ~ Approach.to.ICT+Use.of.ICT+Teachers..degree+Teacher.skill+ESCS+RATCMP1+ICTSCH+ICTRES+ENTUSE+LM_MINS+HEDRES+STUBEHA+ATTLNACT+
JOYREAD+PROAT6+TEACHBEHA+STRATIO+CLSIZE+EDUSHORT+STAFFSHORT+PV1MATH+
PV1READ+CREACTIV+SCHLTYPE,data=data)
summary(fit_social)
b=coefficients(fit_social)
check_beta <- c(
grep("ICTRES", names(b)),
grep("ENTUSE", names(b)),
grep("LM_MINS", names(b)),
grep("TEACHBEHA", names(b)),
grep("EDUSHORT", names(b)),
grep("STUBEHA", names(b)),
grep("JOYREAD", names(b)),
grep("STRATIO", names(b)),
grep("ESCS", names(b)),
grep("PROAT6", names(b)),
grep("RATCMP1", names(b))
)
C <- c()
for( i in 1: length(check_beta)){
vect <- rep(0,fit_social$rank)
vect[check_beta[i]] <- 1
C <- rbind(C,vect)
}
linearHypothesis(fit_social, C, rep(0,length(check_beta)))
# loro si tolgono
fit_social_5 = lm(Social.well.being ~ Approach.to.ICT+Use.of.ICT+Teachers..degree+Teacher.skill+RATCMP1+ICTSCH+HEDRES+ATTLNACT+CLSIZE+STAFFSHORT+PV1MATH+
PV1READ+CREACTIV+IM_PUBLIC,data=data)
summary(fit_social_5)
FORMULA = formula(Social.well.being ~ Approach.to.ICT+Use.of.ICT+Teachers..degree+Teacher.skill+RATCMP1+ICTSCH+HEDRES+ATTLNACT+CLSIZE+STAFFSHORT+PV1MATH+
PV1READ+CREACTIV+IM_PUBLIC)
fit_social = lm(FORMULA,data=data)
summary(fit_social)
par(mfrow=c(2,2))
plot(fit_social)
shapiro.test(fit_social$residuals)
res = fit_social$residuals
for (i in 1:(dim(data)[2]-1)){
plot(res,data[,i],main=colnames(data)[i])
}
a=)4
