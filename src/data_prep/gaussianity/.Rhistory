response_variable_psy = "SWBP"
########
school_prof = c("STRATIO","SCHSIZE","CLSIZE","EDUSHORT","STAFFSHORT","STUBEHA")
response_variable_school = "CREACTIV"
########
school_prof_2 = c("SCHSIZE","CLSIZE","STAFFSHORT")
response_variable_school_2 = "STRATIO"
########################
all_vars = colnames(data)
tech <- colnames(data[grep("tec", all_vars)])
tech
psic <- colnames(data[grep("psi", all_vars)])
psic
culture <- colnames(data[grep("clt", all_vars)])
culture
family <- colnames(data[grep("fam", all_vars)])
family
teach <- colnames(data[grep("tch", all_vars)])
teach
school <- colnames(data[grep("sch", all_vars)])
school
response_variable = psic[6]
response_variable
vars = all_vars
vars = vars[vars!=response_variable]
vars= vars[vars!="CNT"]
vars
not_signific_vars = c("col1_clt","col3_tch","col4_tch","col3_sch")
for(i in 1:length(not_signific_vars)){
spiega(not_signific_vars[i])
print("")
}
vars= vars[!(vars %in% not_signific_vars )]
vars
number_of_covariates = length(vars)
number_of_covariates
formula <- paste(paste(response_variable,"~"), paste(vars, collapse = "+"),paste("+(1|CNT)"))
formula_classic <- paste(paste(response_variable,"~"), paste(vars, collapse = "+"))
formula
linear_model_classic <- lm(formula_classic,data)
summary(linear_model_classic)
linear_model <- lmer(formula,data)
summary(linear_model)
print("######################### VIF ##########################")
vif(linear_model)
rand_eff<-ranef(linear_model)
dotplot(rand_eff)
qqnorm(resid(linear_model))
qqline(resid(linear_model))
qqnorm(resid(linear_model))
qqline(resid(linear_model))
qqnorm(unlist(ranef(linear_model)$CNT))
qqline(unlist(ranef(linear_model)$CNT))
# * Gaussianity
# * Homoschedasticity
plot(linear_model,col=data$CNT)
boxplot(linear_model_classic$residuals ~ data$CNT, col=as.numeric(data$CNT),
xlab='countrys', ylab='Residuals')
abline(h=0)
# Comment
#   1. We want to see no pattern: a cloud around the zero
#   2. We want to see a good fit on the line
#   3. Again, we want to see no pattern
#   4. We have the iso-lines of the Cook distance: we can identify the outliers
shapiro.test(residuals(linear_model))
# * Gaussianity
# * Homoschedasticity
#plot(linear_model,col=data$CNT)
boxplot(linear_model_classic$residuals ~ data$CNT, col=as.numeric(data$CNT),
xlab='countrys', ylab='Residuals')
abline(h=0)
# Comment
#   1. We want to see no pattern: a cloud around the zero
#   2. We want to see a good fit on the line
#   3. Again, we want to see no pattern
#   4. We have the iso-lines of the Cook distance: we can identify the outliers
shapiro.test(residuals(linear_model))
# * Gaussianity
# * Homoschedasticity
plot(linear_model,col=data$CNT)
boxplot(linear_model_classic$residuals ~ data$CNT, col=as.numeric(data$CNT),
xlab='countrys', ylab='Residuals')
abline(h=0)
# Comment
#   1. We want to see no pattern: a cloud around the zero
#   2. We want to see a good fit on the line
#   3. Again, we want to see no pattern
#   4. We have the iso-lines of the Cook distance: we can identify the outliers
shapiro.test(residuals(linear_model))
# * Gaussianity
# * Homoschedasticity
plot(linear_model,col=data$CNT)
boxplot(linear_model_classic$residuals ~ data$CNT,
xlab='countrys', ylab='Residuals')
abline(h=0)
# Comment
#   1. We want to see no pattern: a cloud around the zero
#   2. We want to see a good fit on the line
#   3. Again, we want to see no pattern
#   4. We have the iso-lines of the Cook distance: we can identify the outliers
shapiro.test(residuals(linear_model))
# * Gaussianity
# * Homoschedasticity
plot(linear_model,col=data$CNT)
boxplot(linear_model_classic$residuals ~ data$CNT, col=rainbow(14),
xlab='countrys', ylab='Residuals')
abline(h=0)
# Comment
#   1. We want to see no pattern: a cloud around the zero
#   2. We want to see a good fit on the line
#   3. Again, we want to see no pattern
#   4. We have the iso-lines of the Cook distance: we can identify the outliers
shapiro.test(residuals(linear_model))
# * Gaussianity
# * Homoschedasticity
plot(linear_model,col=data$CNT)
boxplot(linear_model_classic$residuals ~ data$CNT, col=CNT,
xlab='countrys', ylab='Residuals')
# * Gaussianity
# * Homoschedasticity
plot(linear_model,col=data$CNT)
boxplot(linear_model_classic$residuals ~ data$CNT, col=unique(data$CNT),
xlab='countrys', ylab='Residuals')
abline(h=0)
# Comment
#   1. We want to see no pattern: a cloud around the zero
#   2. We want to see a good fit on the line
#   3. Again, we want to see no pattern
#   4. We have the iso-lines of the Cook distance: we can identify the outliers
shapiro.test(residuals(linear_model))
hist(unlist(ranef(linear_model)$CNT))
hist(resid(linear_model))
shapiro.test(residuals(linear_model))
# Best Subset Selection
formula_reg = formula(paste(response_variable,"~."))
regfit.full = regsubsets(formula_reg, data=data,really.big = T)
summary(regfit.full)
formula_reg
response_variable
# Best Subset Selection
formula_reg = formula(paste(response_variable,"~."))
regfit.full = regsubsets(formula_reg, data=data,really.big = T)
summary(regfit.full)
formula_reg
data[!data$CNT]
data[!which(data$CNT)]
data[!which(colnames(data)=="CNT")]
data[,!which(colnames(data)=="CNT")]
data
!which(colnames(data)=="CNT")
colnames(data)
(colnames(data)=="CNT")
data[,!(colnames(data)=="CNT")]
# Best Subset Selection
formula_reg = formula(paste(response_variable,"~."))
regfit.full = regsubsets(formula_reg, data=data[,!(colnames(data)=="CNT")],really.big = T)
summary(regfit.full)
setwd("C:/Users/modin/Desktop/Ettore/UNIVERSITA/PISA_PROJECT/progetto-applied/src/gaussianity")
#DIRECTORIES
root_proj_dir = "../../"
dataset_dir = paste(root_proj_dir,"/data/pisa-woNA_school_final.csv",sep="")
include_dir = paste(root_proj_dir,"/src/include/Utilities.R",sep="")
#INCLUDING UTILITIES
source(include_dir)
#IMPORTING THE DATASET
pisa_data <- read.csv(file=dataset_dir)
head(pisa_data)
dim(pisa_data)
as.factor(pisa_data$schID)
head(pisa_data)
#some adjustments on the data
pisa_data$X <- NULL
rownames(pisa_data)<- pisa_data$schID
pisa_data$CNT <- as.factor(pisa_data$CNT)
head(pisa_data)
#some adjustments on the data
pisa_data$X <- NULL
rownames(pisa_data)<- pisa_data$schID
pisa_data$schID <- NULL
pisa_data$CNT <- as.factor(pisa_data$CNT)
head(pisa_data)
library(MVN)
library(dplyr)
#Heinze-Zikler: in result we can see also the results of the univariate tests on gaussianity
result_hz <- mvn(data = select_if(pisa_data,is.numeric), mvnTest = "hz",univariateTest = "SW")
#multivariate shapiro on the whole dataset
result_shapiro <- mshapiro.test(t(select_if(pisa_data,is.numeric)))
#Heinze-Zikler: in result we can see also the results of the univariate tests on gaussianity
result_hz <- mvn(data = select_if(pisa_data,is.numeric), mvnTest = "hz",univariateTest = "SW")
result_hz
#multivariate shapiro on the whole dataset
result_shapiro <- mshapiro.test(t(select_if(pisa_data,is.numeric)))
library(mvnormtest)
#multivariate shapiro on the whole dataset
result_shapiro <- mshapiro.test(t(select_if(pisa_data,is.numeric)))
result_shapiro
#Heinze-Zikler: in result we can see also the results of the univariate tests on gaussianity
result_hz_cntry <- mvn(data = subset(pisa_data,select = -schID), subset = "CNT", mvnTest = "hz",univariateTest = "SW")
#Heinze-Zikler: in result we can see also the results of the univariate tests on gaussianity
result_hz_cntry <- mvn(data = pisa_data, subset = "CNT", mvnTest = "hz",univariateTest = "SW")
result_hz_cntry
#Multivariate Shapiro-test
result_shapiro_cntry <- list()
for(cntry in unique(pisa_data$CNT)){
result_shapiro_cntry[[cntry]] <- mshapiro.test(t(select_if(pisa_data[pisa_data$CNT==cntry,],is.numeric)))
}
result_shapiro_cntry
#Multivariate Shapiro-test
result_shapiro_cntry <- list()
qq_plot_gaussianity <- function(data,variable_name){
# Compute the quantiles of the data
quantiles <- quantile(data, probs = seq(0, 1, by = 0.01))
# Compute the theoretical quantiles of a normal distribution
norm_quantiles <- qnorm(seq(0, 1, by = 0.01), mean = mean(data), sd = sd(data))
# Create the QQ-plot
plot(norm_quantiles, quantiles, main = variable_name, xlab = "Theoretical quantiles", ylab = "Sample quantiles")
abline(0, 1, col = "red")  # add a reference line
}
#Call the QQ-plot function with the full dataset
for(i in 4:dim(pisa_data)[2]){
qq_plot_gaussianity(pisa_data[,i],colnames(pisa_data)[i])
}
palette <- colorRampPalette(rainbow(length(unique(pisa_data$CNT))))
palette <- palette(length(unique(pisa_data$CNT)))
for(variable in colnames(pisa_data)){
if(variable != "schID" && variable != "CNT"){
#calling the plot
plot(1, type = "n", xlab = "Theoretical quantiles", ylab = "Sample quantiles", main = variable)
#looping over countries
idx <- 1
quantiles <- list()
norm_quantiles <- list()
for(cntry in unique(pisa_data$CNT)){
# Compute the quantiles of the data
quantiles[[cntry]]<- quantile(pisa_data[pisa_data$CNT==cntry, variable], probs = seq(0, 1, by = 0.01))
# Compute the theoretical quantiles of a normal distribution
norm_quantiles[[cntry]] <- qnorm(seq(0, 1, by = 0.01), mean = mean(pisa_data[pisa_data$CNT==cntry, variable]), sd = sd(pisa_data[pisa_data$CNT==cntry,variable]))
#plotting
points(norm_quantiles[[cntry]], quantiles[[cntry]], col = palette[idx])
idx <- idx + 1
}
abline(0, 1, col = "black")
legend("bottomright", legend = unique(pisa_data$CNT), col = palette, pch = 1, cex = 0.75)
}
}
#computing estimated mean and covariance
M <- colMeans(select_if(pisa_data,is.numeric))
S <- cov(select_if(pisa_data,is.numeric))
#chack that S is non-singular
det(S)
#computing mahlanobis distance from the mean for each observation
d2 <- matrix(mahalanobis(select_if(pisa_data,is.numeric), M, S))
#removing over a certain distance from the mean:
threshold_dist <- 50 #we need to tune this parameter
pisa_wo_outliers<- pisa_data[which(d2 <= threshold_dist), ]
#testing again on the dataset wo outliers
result_wo_ouliers <- mvn(data = subset(pisa_wo_outliers,select = -schID), subset = "CNT", mvnTest = "hz",univariateTest = "SW")
#testing again on the dataset wo outliers
result_wo_ouliers <- mvn(data = pisa_wo_outliers, subset = "CNT", mvnTest = "hz",univariateTest = "SW")
result_wo_ouliers
library(car)
#must be strictly positive
transformed_data <- select_if(pisa_wo_outliers,is.numeric)
transformed_data <- transformed_data+abs(min(transformed_data)) + 1e-5 #1e-5 epsilon per ottenere disuguaglianza stretta
lambda <- powerTransform(transformed_data)
#libraries
library(GGally) #for ggcorr
library(ggplot2)
library(dplyr)
library(rlang) #to select variables to be plugged into a formula object
#DIRECTORIES
root_proj_dir = "../../"
dataset_path = paste(root_proj_dir,"data/pisa_wPV_grouped_bysch.csv",sep="")
include_path = paste(root_proj_dir,"src/include/Utilities.R",sep="")
#INCLUDING UTILITIES
source(include_path)
#IMPORTING THE DATASET
pisa_data <- read.csv(file=dataset_path)
#some adjustments on the data
pisa_data$X <- NULL
pisa_data$schID <- NULL
pisa_data$CNT <- as.factor(pisa_data$CNT)
pisa_data$CNTSCHID <- as.factor(pisa_data$CNTSCHID)
pisa_data$CNTSTUID <- as.factor(pisa_data$CNTSTUID)
pisa_data <- pisa_data %>% select(-(starts_with("PV") & !ends_with("1")))
head(pisa_data)
#variabili finite nel dataset
group_list <- c("tec","psi","clt","fam","tch","sch")
grouped_variables <-list()
#list of grouped variables
grouped_variables[["tec"]] <- c("ICTCLASS","ICTHOME","ICTOUTSIDE","ICTRES","AUTICT","COMPICT","INTICT","ENTUSE","HOMESCH","USESCH", "ICTSCH","RATCMP1")
grouped_variables[["psi"]] <- c("ATTLNACT","EMOSUPS","COMPETE","EUDMO","GFOFAIL","SWBP","RESILIENCE","BELONG","BEINGBULLIED","PERFEED")
grouped_variables[["clt"]] <- c("JOYREAD","CULTPOSS","HEDRES","SCREADCOMP","LMINS","MMINS","STUBEHA")
grouped_variables[["fam"]] <- c("WEALTH","ESCS","HOMEPOS","BFMJ2","BMMJ1","HISCED","HISEI","CULTPOSS","HEDRES","ICTHOME")
grouped_variables[["tch"]] <- c("TEACHINT","TEACHSUP","STIMREAD","PROAT5AB","PROAT5AM","PROAT6","TEACHBEHA")
grouped_variables[["sch"]] <- c("PERCOMP","PERCOOP","ICTSCH","RATCMP1","STRATIO","SCHSIZE","CLSIZE","CREACTIV","EDUSHORT","STAFFSHORT")
#OVERALL CORRELATION OVERVIEW
ggcorr(select_if(pisa_data,is.numeric),label=TRUE,label_size = 2)
#WITHIN GROUPS
#tec
ggpairs(select_if(pisa_data[,grouped_variables[["tec"]]],is.numeric),progress = FALSE)
ggcorr(select_if(pisa_data[,grouped_variables[["tec"]]],is.numeric),label=TRUE,label_size = 2)
#psi
ggpairs(select_if(pisa_data[,grouped_variables[["psi"]]],is.numeric), progress = FALSE)
ggcorr(select_if(pisa_data[,grouped_variables[["psi"]]],is.numeric),label=TRUE,label_size = 2)
#clt
ggpairs(select_if(pisa_data[,grouped_variables[["clt"]]],is.numeric), progress = FALSE)
ggcorr(select_if(pisa_data[,grouped_variables[["clt"]]],is.numeric),label=TRUE,label_size = 2)
#fam
ggpairs(select_if(pisa_data[,grouped_variables[["fam"]]],is.numeric), progress = FALSE)
ggcorr(select_if(pisa_data[,grouped_variables[["fam"]]],is.numeric),label=TRUE,label_size = 2)
#tch
ggpairs(select_if(pisa_data[,grouped_variables[["tch"]]],is.numeric), progress = FALSE)
ggcorr(select_if(pisa_data[,grouped_variables[["tch"]]],is.numeric),label=TRUE,label_size = 2)
#sch
ggpairs(select_if(pisa_data[,grouped_variables[["sch"]]],is.numeric), progress = FALSE)
ggcorr(select_if(pisa_data[,grouped_variables[["sch"]]],is.numeric),label=TRUE,label_size = 2)
#numerosity barplot
ggplot(pisa_data, aes(x = CNT)) +
geom_bar()
#Here we see that the variability in LMINS and MMINS is very high
boxplot(select_if(pisa_data,is.numeric),las=2,cex.axis=0.8)
#removing the variables with the highest values
boxplot(select_if(subset(pisa_data,select=-c(LMINS,MMINS)),is.numeric),las=2,cex.axis=0.8)
boxplot(select_if(subset(pisa_data,select=-c(LMINS,MMINS,BFMJ2,BMMJ1,HISEI)),is.numeric),las=2,cex.axis=0.8)
boxplot(select_if(subset(pisa_data,select=-c(LMINS,MMINS,BFMJ2,BMMJ1,HISEI,ICTHOME,HISCED,ICTSCH,RATCMP1)),is.numeric),las=2,cex.axis=0.8)
data <- subset(pisa_data,select=-c(LMINS,MMINS,BFMJ2,BMMJ1,HISEI,ICTHOME,HISCED,ICTSCH,RATCMP1))
#by country for each variable
for(variable in colnames(data)){
if(variable != "CNT"){
formula_str <- paste(variable,"CNT", sep = "~")
boxplot(formula = as.formula(formula_str), data = data, las=2,cex.axis=0.8, main = variable)
}
}
for(variable in colnames(pisa_data)){
if(variable != "CNTSCHID" && variable != "CNT"  && variable != "CNTSTUID"){
hist(pisa_data[,variable],main = variable)
}
}
#computing the variances
variances <- apply(select_if(pisa_data,is.numeric), 2, var)
var_df <- data.frame(variable = names(variances), variance = variances)
#plotting
ggplot(data = var_df, aes(x = variable, y = variance)) +
geom_bar(stat = "identity", fill = "steelblue") +
labs(title = "Variances of Dataframe") +
xlab("Variable") +
ylab("Variance") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
#removing the variables with the highest variance to see the variability of the others
#high_variance_vars = c("LMINS","MMINS","BFMJ2","BMMJ1","HISEI","ICTHOME","HISCED","ICTSCH","RATCMP1")
soglia_varianza = 1
high_variance_vars = var_df[which(var_df$variance>soglia_varianza),]$variable
high_variance_vars
ggplot(data = var_df[!(var_df$variable %in% high_variance_vars),], aes(x = variable, y = variance)) +
geom_bar(stat = "identity", fill = "steelblue") +
labs(title = "Variances of Dataframe") +
xlab("Variable") +
ylab("Variance") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
#DIRECTORIES
root_proj_dir = "../../"
dataset_path = paste(root_proj_dir,"data/pisa-woNA_school_final_wo_Outl_ClassicData_PCA_SCORES.csv",sep="")
include_path = paste(root_proj_dir,"src/include/Utilities.R",sep="")
#INCLUDING UTILITIES
source(include_path)
#IMPORTING THE DATASET
pisa_data <- read.csv(file=dataset_path)
#DIRECTORIES
root_proj_dir = "../../"
dataset_path = paste(root_proj_dir,"data/df_pca_scores.csv",sep="")
include_path = paste(root_proj_dir,"src/include/Utilities.R",sep="")
#INCLUDING UTILITIES
source(include_path)
#IMPORTING THE DATASET
pisa_data <- read.csv(file=dataset_path)
head(pisa_data)
#DIRECTORIES
root_proj_dir = "../../"
dataset_path = paste(root_proj_dir,"data/df_pca_scores.csv",sep="")
include_path = paste(root_proj_dir,"src/include/Utilities.R",sep="")
#INCLUDING UTILITIES
source(include_path)
#IMPORTING THE DATASET
pisa_data <- read.csv(file=dataset_path)
head(pisa_data)
categories_variables = list(tec,psi,clt,fam,tch,sch)
categories_variables = list(tech,psi,clt,fam,tch,sch)
psi
#some adjustments on the data
pisa_data$X <- NULL
pisa_data$CNT <- as.factor(pisa_data$CNT)
library(GGally)
library(ggplot2)
library(dplyr)
ggcorr(select_if(pisa_data,is.numeric),label=TRUE,label_size = 2)
ggplot(pisa_data, aes(x = CNT)) +
geom_bar()
boxplot(select_if(pisa_data,is.numeric),las=2,cex.axis=0.8)
countries = unique(pisa_data$CNT)
shap <-c()
for(c in countries){
for(i in 2:dim(pisa_data)[2]){
hist(pisa_data[which(pisa_data$CNT==c),i],main = paste(colnames(pisa_data)[i],c))
shap <- c(shap,shapiro.test(pisa_data[which(pisa_data$CNT==c),i])$p.value)
}
}
plot(seq(1,(dim(pisa_data)[2]-1)*length(countries)),shap)
hist(shap)
# output on console
for (categ in categories_variables){
x11()
par(mfrow = c(length(categ),1))
data_categ = pisa_data[,c("CNT",categ)]
data_categ$CNT <-as.factor(data_categ$CNT)
for(i in 2:dim(data_categ)[2]){
# boxplot(data_categ[,i],main = paste(colnames(data_categ)[i]),col=data_categ$CNT,pch=16)
boxplot(data_categ[,i]~data_categ$CNT, main= paste(colnames(data_categ)[i]),las=2,
col=rainbow(16))
}
}
all_vars = colnames(pisa_data)
all_vars
all_vars = colnames(pisa_data)
tech <- colnames(data[grep("tec", all_vars)])
tech
psic <- colnames(data[grep("psi", all_vars)])
psic
culture <- colnames(data[grep("clt", all_vars)])
culture
family <- colnames(data[grep("fam", all_vars)])
family
teach <- colnames(data[grep("tch", all_vars)])
teach
school <- colnames(data[grep("sch", all_vars)])
school
categories_variables = list(tech,psic,culture,family,teach,school)
cat_var_names = c("tec","psi","clt","fam","tch","sch")
tech
all_vars = colnames(pisa_data)
tech <- colnames(pisa_data[grep("tec", all_vars)])
tech
psic <- colnames(pisa_data[grep("psi", all_vars)])
psic
culture <- colnames(pisa_data[grep("clt", all_vars)])
culture
family <- colnames(pisa_data[grep("fam", all_vars)])
family
teach <- colnames(pisa_data[grep("tch", all_vars)])
teach
school <- colnames(pisa_data[grep("sch", all_vars)])
school
categories_variables = list(tech,psic,culture,family,teach,school)
cat_var_names = c("tec","psi","clt","fam","tch","sch")
# output on console
for (categ in categories_variables){
x11()
par(mfrow = c(length(categ),1))
data_categ = pisa_data[,c("CNT",categ)]
data_categ$CNT <-as.factor(data_categ$CNT)
for(i in 2:dim(data_categ)[2]){
# boxplot(data_categ[,i],main = paste(colnames(data_categ)[i]),col=data_categ$CNT,pch=16)
boxplot(data_categ[,i]~data_categ$CNT, main= paste(colnames(data_categ)[i]),las=2,
col=rainbow(16))
}
}
# output on console
for (categ in categories_variables){
par(mfrow = c(length(categ),1))
data_categ = pisa_data[,c("CNT",categ)]
data_categ$CNT <-as.factor(data_categ$CNT)
for(i in 2:dim(data_categ)[2]){
# boxplot(data_categ[,i],main = paste(colnames(data_categ)[i]),col=data_categ$CNT,pch=16)
boxplot(data_categ[,i]~data_categ$CNT, main= paste(colnames(data_categ)[i]),las=2,
col=rainbow(16))
}
}
pisa_data$CNT = as.factor(pisa_data$CNT)
plot(pisa_data[,sch], col=pisa_data$CNT,pch=16)
pisa_data$CNT = as.factor(pisa_data$CNT)
plot(pisa_data[,tech], col=pisa_data$CNT,pch=16)
legend("bottomright",legend=unique(pisa_data$CNT),col=1:length(pisa_data$CNT),pch=16)
pisa_data$CNT = as.factor(pisa_data$CNT)
plot(pisa_data[,school], col=pisa_data$CNT,pch=16)
legend("bottomright",legend=unique(pisa_data$CNT),col=1:length(pisa_data$CNT),pch=16)
plot(pisa_data[,school[1]])
plot(pisa_data[,school[4]])
plot(pisa_data[,school[4]],col=1:length(pisa_data$CNT))
plot(pisa_data[,school[4]],col=1:length(pisa_data$CNT),pch=16)
# output on console
for (categ in categories_variables){
x11()
par(mfrow = c(length(categ),1))
data_categ = pisa_data[,c("CNT",categ)]
data_categ$CNT <-as.factor(data_categ$CNT)
for(i in 2:dim(data_categ)[2]){
# boxplot(data_categ[,i],main = paste(colnames(data_categ)[i]),col=data_categ$CNT,pch=16)
boxplot(data_categ[,i]~data_categ$CNT, main= paste(colnames(data_categ)[i]),las=2,
col=rainbow(16))
}
}
pisa_data$CNT = as.factor(pisa_data$CNT)
plot(pisa_data[,school], col=pisa_data$CNT,pch=16)
legend("bottomright",legend=unique(pisa_data$CNT),col=1:length(pisa_data$CNT),pch=16)
plot(pisa_data[,school[4]],col=1:length(pisa_data$CNT),pch=16)
plot(pisa_data[,school[4]],col=1:length(pisa_data$CNT),pch=16)
for (col in colnames(pisa_data)){
plot(pisa_data[,col],col=1:length(pisa_data$CNT),pch=16)
}
for (col in colnames(pisa_data)){
plot(pisa_data[,col],col=1:length(pisa_data$CNT),pch=16,main = col)
}
