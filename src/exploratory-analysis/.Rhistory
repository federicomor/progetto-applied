response_variable_culture = "TMINS"
########
psychology = c("ATTLNACT","EMOSUPS","COMPETE","EUDMO","GFOFAIL","RESILIENCE","BELONG","BEINGBULLIED","PERFEED")
response_variable_psy = "SWBP"
########
school_prof = c("STRATIO","SCHSIZE","CLSIZE","EDUSHORT","STAFFSHORT","STUBEHA")
response_variable_school = "CREACTIV"
########
school_prof_2 = c("SCHSIZE","CLSIZE","STAFFSHORT")
response_variable_school_2 = "STRATIO"
########################
all_vars = colnames(data)
tech <- colnames(data[grep("tec", all_vars)])
tech
psic <- colnames(data[grep("psi", all_vars)])
psic
culture <- colnames(data[grep("clt", all_vars)])
culture
family <- colnames(data[grep("fam", all_vars)])
family
teach <- colnames(data[grep("tch", all_vars)])
teach
school <- colnames(data[grep("sch", all_vars)])
school
response_variable = psic[6]
response_variable
vars = all_vars
vars = vars[vars!=response_variable]
vars= vars[vars!="CNT"]
vars
not_signific_vars = c("col1_clt","col3_tch","col4_tch","col3_sch")
for(i in 1:length(not_signific_vars)){
spiega(not_signific_vars[i])
print("")
}
vars= vars[!(vars %in% not_signific_vars )]
vars
number_of_covariates = length(vars)
number_of_covariates
formula <- paste(paste(response_variable,"~"), paste(vars, collapse = "+"),paste("+(1|CNT)"))
formula_classic <- paste(paste(response_variable,"~"), paste(vars, collapse = "+"))
formula
linear_model_classic <- lm(formula_classic,data)
summary(linear_model_classic)
linear_model <- lmer(formula,data)
summary(linear_model)
print("######################### VIF ##########################")
vif(linear_model)
rand_eff<-ranef(linear_model)
dotplot(rand_eff)
qqnorm(resid(linear_model))
qqline(resid(linear_model))
qqnorm(resid(linear_model))
qqline(resid(linear_model))
qqnorm(unlist(ranef(linear_model)$CNT))
qqline(unlist(ranef(linear_model)$CNT))
# * Gaussianity
# * Homoschedasticity
plot(linear_model,col=data$CNT)
boxplot(linear_model_classic$residuals ~ data$CNT, col=as.numeric(data$CNT),
xlab='countrys', ylab='Residuals')
abline(h=0)
# Comment
#   1. We want to see no pattern: a cloud around the zero
#   2. We want to see a good fit on the line
#   3. Again, we want to see no pattern
#   4. We have the iso-lines of the Cook distance: we can identify the outliers
shapiro.test(residuals(linear_model))
# * Gaussianity
# * Homoschedasticity
#plot(linear_model,col=data$CNT)
boxplot(linear_model_classic$residuals ~ data$CNT, col=as.numeric(data$CNT),
xlab='countrys', ylab='Residuals')
abline(h=0)
# Comment
#   1. We want to see no pattern: a cloud around the zero
#   2. We want to see a good fit on the line
#   3. Again, we want to see no pattern
#   4. We have the iso-lines of the Cook distance: we can identify the outliers
shapiro.test(residuals(linear_model))
# * Gaussianity
# * Homoschedasticity
plot(linear_model,col=data$CNT)
boxplot(linear_model_classic$residuals ~ data$CNT, col=as.numeric(data$CNT),
xlab='countrys', ylab='Residuals')
abline(h=0)
# Comment
#   1. We want to see no pattern: a cloud around the zero
#   2. We want to see a good fit on the line
#   3. Again, we want to see no pattern
#   4. We have the iso-lines of the Cook distance: we can identify the outliers
shapiro.test(residuals(linear_model))
# * Gaussianity
# * Homoschedasticity
plot(linear_model,col=data$CNT)
boxplot(linear_model_classic$residuals ~ data$CNT,
xlab='countrys', ylab='Residuals')
abline(h=0)
# Comment
#   1. We want to see no pattern: a cloud around the zero
#   2. We want to see a good fit on the line
#   3. Again, we want to see no pattern
#   4. We have the iso-lines of the Cook distance: we can identify the outliers
shapiro.test(residuals(linear_model))
# * Gaussianity
# * Homoschedasticity
plot(linear_model,col=data$CNT)
boxplot(linear_model_classic$residuals ~ data$CNT, col=rainbow(14),
xlab='countrys', ylab='Residuals')
abline(h=0)
# Comment
#   1. We want to see no pattern: a cloud around the zero
#   2. We want to see a good fit on the line
#   3. Again, we want to see no pattern
#   4. We have the iso-lines of the Cook distance: we can identify the outliers
shapiro.test(residuals(linear_model))
# * Gaussianity
# * Homoschedasticity
plot(linear_model,col=data$CNT)
boxplot(linear_model_classic$residuals ~ data$CNT, col=CNT,
xlab='countrys', ylab='Residuals')
# * Gaussianity
# * Homoschedasticity
plot(linear_model,col=data$CNT)
boxplot(linear_model_classic$residuals ~ data$CNT, col=unique(data$CNT),
xlab='countrys', ylab='Residuals')
abline(h=0)
# Comment
#   1. We want to see no pattern: a cloud around the zero
#   2. We want to see a good fit on the line
#   3. Again, we want to see no pattern
#   4. We have the iso-lines of the Cook distance: we can identify the outliers
shapiro.test(residuals(linear_model))
hist(unlist(ranef(linear_model)$CNT))
hist(resid(linear_model))
shapiro.test(residuals(linear_model))
# Best Subset Selection
formula_reg = formula(paste(response_variable,"~."))
regfit.full = regsubsets(formula_reg, data=data,really.big = T)
summary(regfit.full)
formula_reg
response_variable
# Best Subset Selection
formula_reg = formula(paste(response_variable,"~."))
regfit.full = regsubsets(formula_reg, data=data,really.big = T)
summary(regfit.full)
formula_reg
data[!data$CNT]
data[!which(data$CNT)]
data[!which(colnames(data)=="CNT")]
data[,!which(colnames(data)=="CNT")]
data
!which(colnames(data)=="CNT")
colnames(data)
(colnames(data)=="CNT")
data[,!(colnames(data)=="CNT")]
# Best Subset Selection
formula_reg = formula(paste(response_variable,"~."))
regfit.full = regsubsets(formula_reg, data=data[,!(colnames(data)=="CNT")],really.big = T)
summary(regfit.full)
knitr::opts_knit$set(root.dir = normalizePath("G:/Il mio Drive/UNIVERSITA/APPLIED STATISTICS/LABS/Lab 3"))
rm( list = ls() )
list.files()
graphics.off() # chiude tutti i device grafici
cat("\014") #pulisci console
food <- read.table('Food.txt', header=T)
tourists <- read.table('tourists.txt', header=T)
tourists = tourists[, -(1:2)]
age <- read.table('scotland.txt', header=T)
rings <- read.table('NO.txt', header=T)
runrec <- read.table('record_mod.txt', header=T)
runrec[,4:7] <- runrec[,4:7]*60
NO <- read.table('NO.txt', header=T)
NO <- data.frame(NO)
var.names <- c("I Control Unit","II Control Unit","III Control Unit","IV Control Unit")
dimnames(NO)[[2]] <- var.names
tourists.mod = tourists
for(i in 1:8) tourists.mod[which(tourists[,i]==0),i] = 1
tourists.log = log(tourists.mod)
NO <- read.table('NO.txt', header=T)
NO <- data.frame(NO)
var.names <- c("I Control Unit","II Control Unit","III Control Unit","IV Control Unit")
dimnames(NO)[[2]] <- var.names
data = NO
head(data)
sd_bool = 2
head(data)
S = cov(data)
Sd = sqrt(diag(S))  #sapply(data,sd)
M = colMeans(data)
var.gen <- det(S)
var.tot <- sum(diag(S))
n <- dim(data)[1]
p <- dim(data)[2]
n
p
knitr::opts_knit$set(root.dir = normalizePath("G:/Il mio Drive/UNIVERSITA/APPLIED STATISTICS/LABS/Lab 3"))
rm( list = ls() )
list.files()
graphics.off() # chiude tutti i device grafici
cat("\014") #pulisci console
food <- read.table('Food.txt', header=T)
tourists <- read.table('tourists.txt', header=T)
tourists = tourists[, -(1:2)]
age <- read.table('scotland.txt', header=T)
rings <- read.table('NO.txt', header=T)
runrec <- read.table('record_mod.txt', header=T)
runrec[,4:7] <- runrec[,4:7]*60
NO <- read.table('NO.txt', header=T)
NO <- data.frame(NO)
var.names <- c("I Control Unit","II Control Unit","III Control Unit","IV Control Unit")
dimnames(NO)[[2]] <- var.names
tourists.mod = tourists
for(i in 1:8) tourists.mod[which(tourists[,i]==0),i] = 1
tourists.log = log(tourists.mod)
NO <- read.table('NO.txt', header=T)
NO <- data.frame(NO)
var.names <- c("I Control Unit","II Control Unit","III Control Unit","IV Control Unit")
dimnames(NO)[[2]] <- var.names
data = NO
head(data)
sd_bool = 2
head(data)
S = cov(data)
Sd = sqrt(diag(S))  #sapply(data,sd)
M = colMeans(data)
var.gen <- det(S)
var.tot <- sum(diag(S))
n <- dim(data)[1]
p <- dim(data)[2]
n
p
boxplot(data, col='gold', main = "Initial boxplot",las = 2)
matplot(t(data), type='l', axes=F)
box()
boxplot(data, add=T, boxwex=0.1, col='red')
par(mar=rep(p,4))
if (sd_bool==2){
data <- scale(data)
data <- data.frame(data)
boxplot(data, col='gold',las=2,main = "scaled -standardiezed- boxplot")
}
if(sd_bool == 1){
data <-scale(x=data, center=T, scale=F)
data <- data.frame(data)
boxplot(data, col='gold',las=2,main = "scaled -centered- boxplot")
}
pc.data <- princomp(data, scores=T)
print(summary(pc.data))
round(pc.data$sd^2/sum(pc.data$sd^2)*100,3)
round(cumsum(pc.data$sd^2)/sum(pc.data$sd^2)*100,3)
load.data <- pc.data$loadings
layout(matrix(c(2,3,1,3),2,byrow=T))
print(pc.data)
plot(pc.data, las=2, main="Principal components",
ylim=c(0,1.3*max(pc.data$sdev)^2))
print(Sd^2)
barplot(Sd^2, las=2, main="Original Variables",
ylim=c(0,1.3*max(Sd^2)), ylab="Variances")
plot(cumsum(pc.data$sd^2)/sum(pc.data$sd^2), type="b", axes=F, xlab="number of
components",ylab="contribution to the total variance", ylim=c(0,1))
abline(h=1, col="blue")
abline(h=0.8, lty=2, col="blue")
box()
axis(2,at=0:10/10,labels=0:10/10)
axis(1,at=1:ncol(data),labels=1:ncol(data),las=2)
first_pc  = 3
#x11()
par(mfcol=c(first_pc,1))
for(i in 1:first_pc) barplot(load.data[,i] ,las=2,ylim = c(-1, 1), main=paste("PC Loadings",i))
#x11()
scores.data <- pc.data$scores
plot(scores.data[, 1:2])
abline(h=0, v=0, lty=2, col="grey")
#DIRECTORIES
root_proj_dir = "../../"
dataset_path = paste(root_proj_dir,"data/df_pca_scores.csv",sep="")
include_path = paste(root_proj_dir,"src/include/Utilities.R",sep="")
#INCLUDING UTILITIES
source(include_path)
#IMPORTING THE DATASET
pisa_data <- read.csv(file=dataset_path)
head(pisa_data)
#library(tsne)
library(Rtsne)
countrys = as.factor(pisa_data$CNT)
pisa_data_cut = pisa_data[,3:(dim(pisa_data)[2]-1)]
perplex = c(1,30,50)
pdf("high dimensionality plots.pdf")
for(k in perplex){
tsne_results <- Rtsne(pisa_data_cut, perplexity=k, check_duplicates = FALSE, pca=FALSE)
title = paste("Perplexity = ", k)
plot(tsne_results$Y[,1],tsne_results$Y[,2], col = "black", bg= countrys, pch = 21, cex = 1, main = title)
}
dev.off()
tsne_results <- Rtsne(pisa_data_cut,dim=2, perplexity=30, check_duplicates = FALSE, pca=FALSE)
countrys_num <- as.numeric(countrys)
plot(tsne_results$Y[,1],tsne_results$Y[,2],col=countrys_num, main = "Perplexity = 30")
plot(tsne_results$Y,col=countrys_num, main = "Perplexity = 30")
library(rgl)
tsne_results <- Rtsne(pisa_data_cut,dim=2, perplexity=30, check_duplicates = FALSE, pca=FALSE)
countrys_num <- as.numeric(countrys)
plot(tsne_results$Y,col=countrys_num, main = "Perplexity = 30")
library(tsne)
plot(tsne_results$Y,col=countrys_num, main = "Perplexity = 30")
plot(tsne_results$Y,col=countrys_num, main = "Perplexity = 30")
tsne_results_3d <- Rtsne(pisa_data_cut,dim=3, perplexity=30, check_duplicates = FALSE, pca=FALSE)
plot3d(tsne_results_3d$Y, pch = 19, cex = 2, col = countrys, main = "Perplexity = 30")
plot3d(tsne_results_3d$Y, pch = 19, cex = 2, col = countrys_num, main = "Perplexity = 30")
countrys = as.factor(pisa_data$CNT)
pisa_data_cut = pisa_data[,3:(dim(pisa_data)[2]-1)]
perplex = c(1,30,50)
pdf("high dimensionality plots.pdf")
for(k in perplex){
tsne_results <- Rtsne(pisa_data_cut, perplexity=k, check_duplicates = FALSE, pca=FALSE)
title = paste("Perplexity = ", k)
plot(tsne_results$Y[,1],tsne_results$Y[,2], col = "black", bg= countrys, pch = 21, cex = 1, main = title)
}
setwd("C:/Users/modin/Desktop/Ettore/UNIVERSITA/PISA_PROJECT/progetto-applied/src/exploratory-analysis")
dev.off()
setwd("C:/Users/modin/Desktop/Ettore/UNIVERSITA/PISA_PROJECT/progetto-applied/src/exploratory-analysis")
#DIRECTORIES
rm(list=ls())
graphics.off()
root_proj_dir = "../../"
dataset_path = paste(root_proj_dir,"data/df_pca_scores.csv",sep="")
include_path = paste(root_proj_dir,"src/include/Utilities.R",sep="")
#INCLUDING UTILITIES
source(include_path)
#IMPORTING THE DATASET
data <- read.csv(file=dataset_path)
head(data)
library(mvtnorm)
library(MASS)
library(car)
library(rgl)
library(leaps)
library(ISLR)
library(glmnet)
library(lme4)
library(nlmeU) ## --> for the dataset
library(nlme)  ## --> for models implementation
library(corrplot)
library(lattice)
library(plot.matrix)
library(insight)
library(ggplot2)
data$X <- NULL
data$CNT <- as.factor(data$CNT)
#data <- data[,23:74] #excluding target variables
head(data)
all_vars = colnames(data)
tech <- colnames(data[grep("tec", all_vars)])
tech
psic <- colnames(data[grep("psi", all_vars)])
psic
culture <- colnames(data[grep("clt", all_vars)])
culture
family <- colnames(data[grep("fam", all_vars)])
family
teach <- colnames(data[grep("tch", all_vars)])
teach
school <- colnames(data[grep("sch", all_vars)])
school
all_vars
response_variable = psic[6]
response_variable
vars = all_vars
vars = vars[vars!=response_variable]
vars= vars[vars!="CNT"]
vars
vars
vars= vars[!(vars %in% not_signific_vars )]
not_signific_vars = c("col1_clt","col3_tch","col4_tch","col3_sch")
vars= vars[!(vars %in% not_signific_vars )]
vars
number_of_covariates = length(vars)
number_of_covariates
formula <- paste(paste(response_variable,"~"), paste(vars, collapse = "+"),paste("+(1|CNT)"))
formula_classic <- paste(paste(response_variable,"~"), paste(vars, collapse = "+"))
formula
linear_model_classic <- lm(formula_classic,data)
summary(linear_model_classic)
linear_model <- lmer(formula,data)
summary(linear_model)
print("######################### VIF ##########################")
vif(linear_model)
# save.image("from_lmm.RData")
coeff = coefficients(linear_model)
coeff
linear_model$coef
linear_model$coefficients
linear_model
names(linear_model)
coeff
coeff = coefficients(linear_model)$CNT
coeff
coeff = coefficients(linear_model)$CNT[1,2:20]
coeff
response_variable
vars
tech <- colnames(coeff[grep("tec", vars)])
tech
temp =(-0.008862) * df$col1_tec+
( 0.029719) * df$col2_tec+
( 0.011752) * df$col3_tec+
(-0.005932) * df$col4_tec+
( 0.015692) * df$col5_tec
##??
df=data
temp =(-0.008862) * df$col1_tec+
( 0.029719) * df$col2_tec+
( 0.011752) * df$col3_tec+
(-0.005932) * df$col4_tec+
( 0.015692) * df$col5_tec
temp
tech
tec_beta_comb = 0
tech <- colnames(coeff[grep("tec", vars)])
tech
for (col in tech){
tec_beta_comb = tec_beta_comb + coeff[,col]*df[,col]
}
all(tec_beta_comb==temp)
tec_beta_comb-temp
psi_beta_comb = (
0.282455) * df$col1_psi+
(-0.137583) * df$col2_psi+
( 0.190003) * df$col3_psi+
( 0.238503) * df$col4_psi+
( 0.239341) * df$col5_psi+
(-0.038022) * df$col7_psi
psi_beta_comb
tec_beta_comb
tec_beta_comb-temp
df[,col]
coeff[,col]
tec_beta_comb-t(temp)
temp[1]
tec_beta_comb[1]
sum(temp-tec_beta_comb)
temp =(-0.008862) * df$col1_tec+
( 0.029719) * df$col2_tec+
( 0.011752) * df$col3_tec+
(-0.005932) * df$col4_tec+
( 0.015692) * df$col5_tec
sum(temp-tec_beta_comb)
tech <- colnames(coeff[grep("tec", vars)])
tech
for (col in tech){
tec_beta_comb = tec_beta_comb + coeff[,col]*df[,col]
}
sum(temp-tec_beta_comb)
sum(temp-tec_beta_comb)
clt_beta_comb = 0
clt <- colnames(coeff[grep("clt", vars)])
for (col in clt){
clt_beta_comb = clt_beta_comb + coeff[,col]*df[,col]
}
clt_beta_comb
temp =
(-0.028202) * df$col2_clt+
( 0.005754) * df$col3_clt
sum(temp-clt_beta_comb)
##??
df=data
coeff = coefficients(linear_model)$CNT[1,2:20]
# coefficienti tratti dal summary
tec_beta_comb = 0
tech <- colnames(coeff[grep("tec", vars)])
for (col in tech){
tec_beta_comb = tec_beta_comb + coeff[,col]*df[,col]
}
psi_beta_comb = 0
psi <- colnames(coeff[grep("psi", vars)])
for (col in psi){
psi_beta_comb = psi_beta_comb + coeff[,col]*df[,col]
}
clt_beta_comb = 0
clt <- colnames(coeff[grep("clt", vars)])
for (col in clt){
clt_beta_comb = clt_beta_comb + coeff[,col]*df[,col]
}
fam_beta_comb = 0
fam <- colnames(coeff[grep("fam", vars)])
for (col in clt){
fam_beta_comb = fam_beta_comb + coeff[,col]*df[,col]
}
tch_beta_comb = 0
tch <- colnames(coeff[grep("tch", vars)])
for (col in clt){
tch_beta_comb = tch_beta_comb + coeff[,col]*df[,col]
}
sch_beta_comb = 0
sch <- colnames(coeff[grep("sch", vars)])
for (col in clt){
sch_beta_comb = sch_beta_comb + coeff[,col]*df[,col]
}
##??
df_tec=df
boxplot(tec_beta_comb ~ df_tec$CNT, col=fun_colori(length(unique(df$CNT))),
las=2,main = "tec combined with betas")
boxplot(psi_beta_comb ~ df_tec$CNT, col=fun_colori(length(unique(df$CNT))),
las=2,main = "psi combined with betas")
boxplot(clt_beta_comb ~ df_tec$CNT, col=fun_colori(length(unique(df$CNT))),
las=2,main = "clt combined with betas")
boxplot(fam_beta_comb ~ df_tec$CNT, col=fun_colori(length(unique(df$CNT))),
las=2,main = "fam combined with betas")
boxplot(tch_beta_comb ~ df_tec$CNT, col=fun_colori(length(unique(df$CNT))),
las=2,main = "tch combined with betas")
boxplot(sch_beta_comb ~ df_tec$CNT, col=fun_colori(length(unique(df$CNT))),
las=2,main = "sch combined with betas")
