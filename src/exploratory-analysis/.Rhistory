j=2
h=1
while(i!=g&&j!=g-1){
temp <- sort(c(levels(group_ordered)[i],levels(group_ordered)[j]))
ind<-paste(temp[1],temp[2])
if(CI[[ind]][k,1]*CI[[ind]][k,3]<0){ # zero in the interval
j=j+1
}
else{
print( names(CI[ind]))
lines (c(h,h), c(CI[[ind]][k,1],CI[[ind]][k,3]));
points(ind, mg[ii,k]-mg[jj,k], pch=16,col="green");
points(h, CI[[ind]][k,1], col=rainbow(g)[j], pch=16);
points(h, CI[[ind]][k,2], col="black", pch=16);
points(h, CI[[ind]][k,3], col=rainbow(g)[i], pch=16);
i=j
j=i+1
h=h+1
}
}
print("####")
}
######
mg
mg[1,1]-mg[2,1]
# Now we have a complete frame (intervals for all the components of tau_i)
# Comment
#   From these intervals we can see who is responsable for the change:
#   if the zero is NOT present in a comparison 'gi_gj' in an interval 'Xk'
#   then the variable 'Xk' is influenced by groups 'gi' and 'gj'.
# Plot: different panels -> different features
### cambia nome titolo
for(k in 1:p){
#x11()
#par(mfrow=c(2,1))
# Order boxes by median
group_ordered <- with(data,
reorder(data$label,data.feats[,k],mean))
boxplot(data.feats[,k]~group_ordered, main=paste(colnames(data.feats)[k]),las=2,
ylim=c(round(min(data.feats[,k])),
round(max(data.feats[,k]))), col = rainbow(g))
abline(h=0)
plot(c(1,5), xlim=c(c(1,5)), pch='',ylim=c(min(unlist(CI)),max(unlist(CI))),
xlab='pairs treat', ylab=paste('CI tau',colnames(data.feats)[k]),
main=paste('CItau',colnames(data.feats)[k]))
abline(h=0)
######
i=1
j=2
h=1
while(i!=g&&j!=g-1){
temp <- sort(c(levels(group_ordered)[i],levels(group_ordered)[j]))
ind<-paste(temp[1],temp[2])
if(CI[[ind]][k,1]*CI[[ind]][k,3]<0){ # zero in the interval
j=j+1
}
else{
print( names(CI[ind]))
lines (c(h,h), c(CI[[ind]][k,1],CI[[ind]][k,3]));
#points(h, mg[ii,k]-mg[jj,k], pch=16,col="green");
points(h, CI[[ind]][k,1], col=rainbow(g)[j], pch=16);
points(h, CI[[ind]][k,2], col="black", pch=16);
points(h, CI[[ind]][k,3], col=rainbow(g)[i], pch=16);
i=j
j=i+1
h=h+1
}
}
print("####")
}
# Comment
#   If no one contains 0 it means that every group has relevance in every feature.
rm( list = ls() )
list.files()
graphics.off() # chiude tutti i device grafici
cat("\014") #pulisci console
library(mvtnorm)
library(MVN)
library(rgl)
library(car)
library(dbscan)
library(cluster)
library(fields)
#directories
dataset_dir = "../../data/"
include_dir = "../include/Utilities.R"
#including utilities
#including utilities
source(include_dir)
#importing the dataset
pisa_data <- read.csv(file=paste(dataset_dir,"pisa-woNA_school_final_wo_Outl_ClassicData_PCA_SCORES.csv",sep=""))
head(pisa_data)
p = dim(pisa_data)[2]
categories_variables = list(tec,psi,clt,fam,tch,sch)
cat_var_names = c("tec","psi","clt","fam","tch","sch")
data_grezzi = pisa_data
head(data_grezzi)
# Dimensions
n = dim(data_grezzi)[1]
p = dim(data_grezzi)[2]
meas_labels<-c(2:p)
measures = data_grezzi[,meas_labels]
head(measures)
## note: rescale the variables if there's a high order of magnitude
measures = measures[,tec]
head(measures)
# methods: "euclidean", "manhattan", "canberra"
name_dist_chosen <- "manhattan"
# linkages: "single", "average", "complete", "ward", "ward.D2"
name_linkage_chosen <- 'ward.D2'
data.dist = dist(measures, method=name_dist_chosen)
#image(1:n,1:n,as.matrix(data.dist), main=paste('metrics:, name_dist_chosen'), asp=1, xlab='i', ylab='j' )
# Comment
#   light colors = small values
#   dark colors  = large values
data.hclust = hclust(data.dist, method=name_linkage_chosen)
# Order of aggregation
#data.hclust$merge
# Comment
# [128,] -119 80 (e.g.)
# It means that at the step 128 the unity 119 has been aggregated to the cluster
# produced at step 80. If both values are positive, e.g. [140,] 90 95, then we are
# aggregating the clusters produced at the step 90 and 95. If both are negative then
# we are creating a new cluster.
# Distance at which we have aggregations
#data.hclust$height
# Ordering that allows to avoid intersection in the dendrogram
#data.hclust$order
plot(data.hclust, main=paste(name_dist_chosen,name_linkage_chosen), hang=-0.1, xlab='', labels=F, cex=0.6, sub='')
k_chosen = 3
plot(data.hclust, main=paste(name_dist_chosen,name_linkage_chosen), hang=-0.1, xlab='', labels=F, cex=0.6, sub='')
rect.hclust(data.hclust, k=k_chosen)
# How to cut a dendrogram?
# We generate vectors of labels through the command cutree()
cluster.cutree = cutree(data.hclust, k=k_chosen)
table(cluster.cutree)
measures = cbind(measures,cluster.cutree)
measures$cluster.cutree = as.factor(measures$cluster.cutree)
# Did it aggregate coherently with the dissimilarity matrix or not?
# Cophenetic Matrices
coph.mat <- cophenetic(data.hclust)
#image(as.matrix(coph.mat), main=name_dist_chosen, asp=1 )
# Cophenetic Coefficients
coph.coeff = cor(data.dist, coph.mat)
coph.coeff
plot(measures[,1],measures[,2],col=cluster.cutree+1)
plot3d(measures, size=3, col=cluster.cutree+1, aspect = F)
head(measures)
tec
measures = measures[,tec]
head(measures)
# methods: "euclidean", "manhattan", "canberra"
name_dist_chosen <- "manhattan"
# linkages: "single", "average", "complete", "ward", "ward.D2"
name_linkage_chosen <- 'ward.D2'
data.dist = dist(measures, method=name_dist_chosen)
data.hclust = hclust(data.dist, method=name_linkage_chosen)
# Order of aggregation
#data.hclust$merge
# Distance at which we have aggregations
#data.hclust$height
# Ordering that allows to avoid intersection in the dendrogram
#data.hclust$order
k_chosen = 3
plot(data.hclust, main=paste(name_dist_chosen,name_linkage_chosen), hang=-0.1, xlab='', labels=F, cex=0.6, sub='')
rect.hclust(data.hclust, k=k_chosen)
# How to cut a dendrogram?
# We generate vectors of labels through the command cutree()
cluster.cutree = cutree(data.hclust, k=k_chosen)
table(cluster.cutree)
measures = cbind(measures,cluster.cutree)
measures$cluster.cutree = as.factor(measures$cluster.cutree)
head(mesures)
head(measures)
measures
plot(measures[,1],measures[,2],col=cluster.cutree+1)
plot(measures[,1],measures[,3],col=cluster.cutree+1)
plot3d(measures, size=3, col=cluster.cutree+1, aspect = F)
data_clustered<-pisa_data
data_clustered$cluster <- NULL
for(i in dim(data_clustered)[1]){
data_clustered[i,"cluster"] = cluster.cutree[i]
}
data1 = measures[cluster.cutree==1,]
data2 = measures[cluster.cutree==2,]
data3 = measures[cluster.cutree==3,]
data4 = measures[cluster.cutree==4,]
data_clustered
data_clustered[i,"cluster"]
cluster.cutree
length(cluster.cutree)
data_clustered<-pisa_data
data_clustered$cluster <- NULL
for(i in dim(data_clustered)[1]){
data_clustered[i,"cluster"] = cluster.cutree[i]
}
data1 = measures[cluster.cutree==1,]
data2 = measures[cluster.cutree==2,]
data3 = measures[cluster.cutree==3,]
data4 = measures[cluster.cutree==4,]
data_clustered
cluster.cutree[i]
data4
data3
data_clustered
data_clustered[i,"cluster"]
data_clustered[,"cluster"]
dim(data_clustered)[1]
data_clustered<-pisa_data
data_clustered$cluster <- NULL
for(i in dim(data_clustered)[1]){
data_clustered[i,"cluster"] = cluster.cutree[i]
}
head(data_clustered)
cluster.cutree
data_clustered<-pisa_data
data_clustered$cluster <- NULL
for(i in dim(data_clustered)[1]){
data_clustered[i,20] = cluster.cutree[i]
}
head(data_clustered)
data_clustered<-pisa_data
data_clustered$cluster <- NULL
for(i in dim(data_clustered)[1]){
data_clustered$cluster[i] = cluster.cutree[i]
}
head(data_clustered)
data_clustered<-pisa_data
data_clustered$cluster <- 1
for(i in dim(data_clustered)[1]){
data_clustered$cluster[i] = cluster.cutree[i]
}
head(data_clustered)
data_clustered<-pisa_data
data_clustered$cluster = cluster.cutree
head(data_clustered)
#DIRECTORIES
root_proj_dir = "../../"
dataset_path = paste(root_proj_dir,"data/pisa-woNA_school_final_wo_Outl_ClassicData_PCA_SCORES.csv",sep="")
include_path = paste(root_proj_dir,"src/include/Utilities.R",sep="")
#INCLUDING UTILITIES
source(include_path)
setwd("C:/Users/modin/Desktop/Ettore/UNIVERSITA/PISA_PROJECT/progetto-applied/src/exploratory-analysis")
#DIRECTORIES
root_proj_dir = "../../"
dataset_path = paste(root_proj_dir,"data/pisa-woNA_school_final_wo_Outl_ClassicData_PCA_SCORES.csv",sep="")
include_path = paste(root_proj_dir,"src/include/Utilities.R",sep="")
#INCLUDING UTILITIES
source(include_path)
#IMPORTING THE DATASET
pisa_data <- read.csv(file=dataset_path)
categories_variables = list(tec,psi,clt,fam,tch,sch)
cat_var_names = c("tec","psi","clt","fam","tch","sch")
#some adjustments on the data
pisa_data$X <- NULL
pisa_data$CNT <- as.factor(pisa_data$CNT)
library(GGally)
library(ggplot2)
library(dplyr)
ggcorr(select_if(pisa_data,is.numeric),label=TRUE,label_size = 2)
ggplot(pisa_data, aes(x = CNT)) +
geom_bar()
boxplot(select_if(pisa_data,is.numeric),las=2,cex.axis=0.8)
countries = unique(pisa_data$CNT)
shap <-c()
for(c in countries){
for(i in 2:dim(pisa_data)[2]){
hist(pisa_data[which(pisa_data$CNT==c),i],main = paste(colnames(pisa_data)[i],c))
shap <- c(shap,shapiro.test(pisa_data[which(pisa_data$CNT==c),i])$p.value)
}
}
plot(seq(1,(dim(pisa_data)[2]-1)*length(countries)),shap)
hist(shap)
# output on console
for (categ in categories_variables){
x11()
par(mfrow = c(length(categ),1))
data_categ = pisa_data[,c("CNT",categ)]
data_categ$CNT <-as.factor(data_categ$CNT)
for(i in 2:dim(data_categ)[2]){
# boxplot(data_categ[,i],main = paste(colnames(data_categ)[i]),col=data_categ$CNT,pch=16)
boxplot(data_categ[,i]~data_categ$CNT, main= paste(colnames(data_categ)[i]),las=2,
col=rainbow(16))
}
}
#libraries
library(GGally) #for ggcorr
library(ggplot2)
library(dplyr)
library(rlang) #to select variables to be plugged into a formula object
#DIRECTORIES
root_proj_dir = "../../"
dataset_path = paste(root_proj_dir,"data/pisa-woNA_school_final.csv",sep="")
include_path = paste(root_proj_dir,"src/include/Utilities.R",sep="")
#INCLUDING UTILITIES
source(include_path)
#IMPORTING THE DATASET
pisa_data <- read.csv(file=dataset_path)
categories_variables = list(tec,psi,clt,fam,tch,sch)
cat_var_names = c("tec","psi","clt","fam","tch","sch")
#some adjustments on the data
pisa_data$X <- NULL
pisa_data$schID <- as.factor(pisa_data$schID)
pisa_data$CNT <- as.factor(pisa_data$CNT)
ggcorr(select_if(pisa_data,is.numeric),label=TRUE,label_size = 2)
#too many vars: unreadable
#ggpairs(select_if(pisa_data,is.numeric))
ggplot(pisa_data, aes(x = CNT)) +
geom_bar()
#Here we see that the variability in LMINS and MMINS is very high
boxplot(select_if(pisa_data,is.numeric),las=2,cex.axis=0.8)
#removing the variables with the highest values
boxplot(select_if(subset(pisa_data,select=-c(LMINS,MMINS)),is.numeric),las=2,cex.axis=0.8)
boxplot(select_if(subset(pisa_data,select=-c(LMINS,MMINS,BFMJ2,BMMJ1,HISEI)),is.numeric),las=2,cex.axis=0.8)
boxplot(select_if(subset(pisa_data,select=-c(LMINS,MMINS,BFMJ2,BMMJ1,HISEI,ICTHOME,HISCED,ICTSCH,RATCMP1)),is.numeric),las=2,cex.axis=0.8)
data <- subset(pisa_data,select=-c(LMINS,MMINS,BFMJ2,BMMJ1,HISEI,ICTHOME,HISCED,ICTSCH,RATCMP1,schID))
#by country for each variable
for(variable in colnames(data)){
if(variable != "CNT"){
formula_str <- paste(variable,"CNT", sep = "~")
boxplot(formula = as.formula(formula_str), data = data, las=2,cex.axis=0.8, main = variable)
}
}
for(variable in colnames(pisa_data)){
if(variable != "schID" && variable != "CNT"){
hist(pisa_data[,variable],main = variable)
}
}
countries = unique(pisa_data$CNT)
#plotting the histograms
for(cntry in countries){
for(variable in colnames(pisa_data)){
if(variable != "schID" && variable != "CNT"){
hist(pisa_data[which(pisa_data$CNT==cntry),variable],main = paste(variable,cntry))
}
}
}
#computing the variances
variances <- apply(select_if(pisa_data,is.numeric), 2, var)
var_df <- data.frame(variable = names(variances), variance = variances)
#plotting
ggplot(data = var_df, aes(x = variable, y = variance)) +
geom_bar(stat = "identity", fill = "steelblue") +
labs(title = "Variances of Dataframe") +
xlab("Variable") +
ylab("Variance") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
#removing the variables with the highest variance to see the variability of the others
ggplot(data = var_df[!(var_df$variable %in% c("LMINS","MMINS","BFMJ2","BMMJ1","HISEI","ICTHOME","HISCED","ICTSCH","RATCMP1")),], aes(x = variable, y = variance)) +
geom_bar(stat = "identity", fill = "steelblue") +
labs(title = "Variances of Dataframe") +
xlab("Variable") +
ylab("Variance") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
#computing the variances
variances <- apply(select_if(pisa_data,is.numeric), 2, var)
var_df <- data.frame(variable = names(variances), variance = variances)
#plotting
ggplot(data = var_df, aes(x = variable, y = variance)) +
geom_bar(stat = "identity", fill = "steelblue") +
labs(title = "Variances of Dataframe") +
xlab("Variable") +
ylab("Variance") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
#removing the variables with the highest variance to see the variability of the others
high_variance_vars = c("LMINS","MMINS","BFMJ2","BMMJ1","HISEI","ICTHOME","HISCED","ICTSCH","RATCMP1")
ggplot(data = var_df[!(var_df$variable %in% high_variance_vars),], aes(x = variable, y = variance)) +
geom_bar(stat = "identity", fill = "steelblue") +
labs(title = "Variances of Dataframe") +
xlab("Variable") +
ylab("Variance") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
#computing the variances
variances <- apply(select_if(pisa_data,is.numeric), 2, var)
var_df <- data.frame(variable = names(variances), variance = variances)
#plotting
ggplot(data = var_df, aes(x = variable, y = variance)) +
geom_bar(stat = "identity", fill = "steelblue") +
labs(title = "Variances of Dataframe") +
xlab("Variable") +
ylab("Variance") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
#removing the variables with the highest variance to see the variability of the others
high_variance_vars = c("LMINS","MMINS","BFMJ2","BMMJ1","HISEI","ICTHOME","HISCED","ICTSCH","RATCMP1")
high_variance_vars=c("LMINS","MMINS")
ggplot(data = var_df[!(var_df$variable %in% high_variance_vars),], aes(x = variable, y = variance)) +
geom_bar(stat = "identity", fill = "steelblue") +
labs(title = "Variances of Dataframe") +
xlab("Variable") +
ylab("Variance") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
#computing the variances
variances <- apply(select_if(pisa_data,is.numeric), 2, var)
var_df <- data.frame(variable = names(variances), variance = variances)
#plotting
ggplot(data = var_df, aes(x = variable, y = variance)) +
geom_bar(stat = "identity", fill = "steelblue") +
labs(title = "Variances of Dataframe") +
xlab("Variable") +
ylab("Variance") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
#removing the variables with the highest variance to see the variability of the others
high_variance_vars = c("LMINS","MMINS","BFMJ2","BMMJ1","HISEI","ICTHOME","HISCED","ICTSCH","RATCMP1")
var(high_variance_vars)
ggplot(data = var_df[!(var_df$variable %in% high_variance_vars),], aes(x = variable, y = variance)) +
geom_bar(stat = "identity", fill = "steelblue") +
labs(title = "Variances of Dataframe") +
xlab("Variable") +
ylab("Variance") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
#computing the variances
variances <- apply(select_if(pisa_data,is.numeric), 2, var)
var_df <- data.frame(variable = names(variances), variance = variances)
#plotting
ggplot(data = var_df, aes(x = variable, y = variance)) +
geom_bar(stat = "identity", fill = "steelblue") +
labs(title = "Variances of Dataframe") +
xlab("Variable") +
ylab("Variance") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
#removing the variables with the highest variance to see the variability of the others
high_variance_vars = c("LMINS","MMINS","BFMJ2","BMMJ1","HISEI","ICTHOME","HISCED","ICTSCH","RATCMP1")
var(var_df[high_variance_vars])
var(var_df[,high_variance_vars])
var(var_df[,"LMINS"])
var_df[,"LMINS"]
variances
var_df
high_variance_vars = names(var_df[which(var_df$variance>10)])
which(var_df$variance>10)
var_df[which(var_df$variance>10)]
var_df
high_variance_vars = var_df[which(var_df$variance>10),]$variable
high_variance_vars
#computing the variances
variances <- apply(select_if(pisa_data,is.numeric), 2, var)
var_df <- data.frame(variable = names(variances), variance = variances)
#plotting
ggplot(data = var_df, aes(x = variable, y = variance)) +
geom_bar(stat = "identity", fill = "steelblue") +
labs(title = "Variances of Dataframe") +
xlab("Variable") +
ylab("Variance") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
#removing the variables with the highest variance to see the variability of the others
high_variance_vars = c("LMINS","MMINS","BFMJ2","BMMJ1","HISEI","ICTHOME","HISCED","ICTSCH","RATCMP1")
high_variance_vars = var_df[which(var_df$variance>10),]$variable
ggplot(data = var_df[!(var_df$variable %in% high_variance_vars),], aes(x = variable, y = variance)) +
geom_bar(stat = "identity", fill = "steelblue") +
labs(title = "Variances of Dataframe") +
xlab("Variable") +
ylab("Variance") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
#computing the variances
variances <- apply(select_if(pisa_data,is.numeric), 2, var)
var_df <- data.frame(variable = names(variances), variance = variances)
#plotting
ggplot(data = var_df, aes(x = variable, y = variance)) +
geom_bar(stat = "identity", fill = "steelblue") +
labs(title = "Variances of Dataframe") +
xlab("Variable") +
ylab("Variance") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
#removing the variables with the highest variance to see the variability of the others
high_variance_vars = c("LMINS","MMINS","BFMJ2","BMMJ1","HISEI","ICTHOME","HISCED","ICTSCH","RATCMP1")
high_variance_vars = var_df[which(var_df$variance>0.75),]$variable
ggplot(data = var_df[!(var_df$variable %in% high_variance_vars),], aes(x = variable, y = variance)) +
geom_bar(stat = "identity", fill = "steelblue") +
labs(title = "Variances of Dataframe") +
xlab("Variable") +
ylab("Variance") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
#computing the variances
variances <- apply(select_if(pisa_data,is.numeric), 2, var)
var_df <- data.frame(variable = names(variances), variance = variances)
#plotting
ggplot(data = var_df, aes(x = variable, y = variance)) +
geom_bar(stat = "identity", fill = "steelblue") +
labs(title = "Variances of Dataframe") +
xlab("Variable") +
ylab("Variance") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
#removing the variables with the highest variance to see the variability of the others
high_variance_vars = c("LMINS","MMINS","BFMJ2","BMMJ1","HISEI","ICTHOME","HISCED","ICTSCH","RATCMP1")
high_variance_vars = var_df[which(var_df$variance>1),]$variable
ggplot(data = var_df[!(var_df$variable %in% high_variance_vars),], aes(x = variable, y = variance)) +
geom_bar(stat = "identity", fill = "steelblue") +
labs(title = "Variances of Dataframe") +
xlab("Variable") +
ylab("Variance") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
#computing the variances
variances <- apply(select_if(pisa_data,is.numeric), 2, var)
var_df <- data.frame(variable = names(variances), variance = variances)
#plotting
ggplot(data = var_df, aes(x = variable, y = variance)) +
geom_bar(stat = "identity", fill = "steelblue") +
labs(title = "Variances of Dataframe") +
xlab("Variable") +
ylab("Variance") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
#removing the variables with the highest variance to see the variability of the others
#high_variance_vars = c("LMINS","MMINS","BFMJ2","BMMJ1","HISEI","ICTHOME","HISCED","ICTSCH","RATCMP1")
soglia_varianza = 1
high_variance_vars = var_df[which(var_df$variance>soglia_varianza),]$variable
high_variance_vars
ggplot(data = var_df[!(var_df$variable %in% high_variance_vars),], aes(x = variable, y = variance)) +
geom_bar(stat = "identity", fill = "steelblue") +
labs(title = "Variances of Dataframe") +
xlab("Variable") +
ylab("Variance") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
