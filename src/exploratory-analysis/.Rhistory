0.282455) * df$col1_psi+
(-0.137583) * df$col2_psi+
( 0.190003) * df$col3_psi+
( 0.238503) * df$col4_psi+
( 0.239341) * df$col5_psi+
(-0.038022) * df$col7_psi
clt_beta_comb =
(-0.028202) * df$col2_clt+
( 0.005754) * df$col3_clt
fam_beta_comb = (-0.008007) * df$col1_fam
tch_beta_comb =
( 0.034128) * df$col1_tch+
(-0.068108) * df$col2_tch
sch_beta_comb =
( 0.007906) * df$col1_sch+
(-0.005847) * df$col2_sch+
(-0.005905) * df$col4_sch
boxplot(tec_beta_comb ~ df_tec$CNT, col=fun_colori(length(unique(df$CNT))),
las=2,main = "tec combined with betas")
df=data
# coefficienti tratti dal summary
tec_beta_comb =
(-0.008862) * df$col1_tec+
( 0.029719) * df$col2_tec+
( 0.011752) * df$col3_tec+
(-0.005932) * df$col4_tec+
( 0.015692) * df$col5_tec
psi_beta_comb = (
0.282455) * df$col1_psi+
(-0.137583) * df$col2_psi+
( 0.190003) * df$col3_psi+
( 0.238503) * df$col4_psi+
( 0.239341) * df$col5_psi+
(-0.038022) * df$col7_psi
clt_beta_comb =
(-0.028202) * df$col2_clt+
( 0.005754) * df$col3_clt
fam_beta_comb = (-0.008007) * df$col1_fam
tch_beta_comb =
( 0.034128) * df$col1_tch+
(-0.068108) * df$col2_tch
sch_beta_comb =
( 0.007906) * df$col1_sch+
(-0.005847) * df$col2_sch+
(-0.005905) * df$col4_sch
df_tec=df
boxplot(tec_beta_comb ~ df_tec$CNT, col=fun_colori(length(unique(df$CNT))),
las=2,main = "tec combined with betas")
boxplot(psi_beta_comb ~ df_tec$CNT, col=fun_colori(length(unique(df$CNT))),
las=2,main = "psi combined with betas")
boxplot(clt_beta_comb ~ df_tec$CNT, col=fun_colori(length(unique(df$CNT))),
las=2,main = "clt combined with betas")
boxplot(fam_beta_comb ~ df_tec$CNT, col=fun_colori(length(unique(df$CNT))),
las=2,main = "fam combined with betas")
boxplot(tch_beta_comb ~ df_tec$CNT, col=fun_colori(length(unique(df$CNT))),
las=2,main = "tch combined with betas")
boxplot(sch_beta_comb ~ df_tec$CNT, col=fun_colori(length(unique(df$CNT))),
las=2,main = "sch combined with betas")
pisa_data$CNT = as.factor(pisa_data$CNT)
for (col in colnames(pisa_data)){
plot(pisa_data[,col],col=pisa_data$CNT,pch=16,main = col)
}
#DIRECTORIES
root_proj_dir = "../../"
dataset_path = paste(root_proj_dir,"data/df_pca_scores.csv",sep="")
include_path = paste(root_proj_dir,"src/include/Utilities.R",sep="")
#INCLUDING UTILITIES
source(include_path)
#IMPORTING THE DATASET
pisa_data <- read.csv(file=dataset_path)
head(pisa_data)
all_vars = colnames(pisa_data)
tech <- colnames(pisa_data[grep("tec", all_vars)])
tech
psic <- colnames(pisa_data[grep("psi", all_vars)])
psic
culture <- colnames(pisa_data[grep("clt", all_vars)])
culture
family <- colnames(pisa_data[grep("fam", all_vars)])
family
teach <- colnames(pisa_data[grep("tch", all_vars)])
teach
school <- colnames(pisa_data[grep("sch", all_vars)])
school
categories_variables = list(tech,psic,culture,family,teach,school)
cat_var_names = c("tec","psi","clt","fam","tch","sch")
#some adjustments on the data
pisa_data$X <- NULL
pisa_data$CNT <- as.factor(pisa_data$CNT)
library(GGally)
library(ggplot2)
library(dplyr)
ggcorr(select_if(pisa_data,is.numeric),label=TRUE,label_size = 2)
ggplot(pisa_data, aes(x = CNT)) +
geom_bar()
boxplot(select_if(pisa_data,is.numeric),las=2,cex.axis=0.8)
countries = unique(pisa_data$CNT)
shap <-c()
for(c in countries){
for(i in 2:dim(pisa_data)[2]){
hist(pisa_data[which(pisa_data$CNT==c),i],main = paste(colnames(pisa_data)[i],c))
shap <- c(shap,shapiro.test(pisa_data[which(pisa_data$CNT==c),i])$p.value)
}
}
plot(seq(1,(dim(pisa_data)[2]-1)*length(countries)),shap)
hist(shap)
# output on console
for (categ in categories_variables){
x11()
par(mfrow = c(length(categ),1))
data_categ = pisa_data[,c("CNT",categ)]
data_categ$CNT <-as.factor(data_categ$CNT)
for(i in 2:dim(data_categ)[2]){
# boxplot(data_categ[,i],main = paste(colnames(data_categ)[i]),col=data_categ$CNT,pch=16)
boxplot(data_categ[,i]~data_categ$CNT, main= paste(colnames(data_categ)[i]),las=2,
col=rainbow(16))
}
}
pisa_data$CNT = as.factor(pisa_data$CNT)
plot(pisa_data[,school], col=pisa_data$CNT,pch=16)
legend("bottomright",legend=unique(pisa_data$CNT),col=pisa_data$CNT,pch=16)
for (col in colnames(pisa_data)){
plot(pisa_data[,col],col=pisa_data$CNT,pch=16,main = col)
}
dimmi[["col4_sch"]]
dimmi["col4_sch"]
dimmi("col4_sch")
unique(data$col4_sch)
boxplot(pisa_data$col3_tch)
hist(pisa_data$col3_tch)
hist(pisa_data$col1_tec)
countrys = levels(pisa_data$CNT)
countrys
countrys = levels(pisa_data$CNT)
for (col in colnames(pisa_data)){
plot(pisa_data[,col],col=pisa_data$CNT,pch=16,main = col)
}
hist(pisa_data$col4_sch)
hist(pisa_data$col3_tch)
hist(pisa_data$col1_tec)
hist(pisa_data$col4_sch)
countrys
countrys
pisa_data$CNT
pisa_data$CNT[4700]
pisa_data$CNT[470]
pisa_data$CNT[3800]
pisa_data$CNT[end(pisa_data)]
pisa_data$CNT[end(pisa_data[1])]
end(pisa_data[1])
pisa_data$CNT[dim(pisa_data)[1]]
countrys = levels(pisa_data$CNT)
for (column in colnames(pisa_data)){
plot(pisa_data[,column],col=pisa_data$CNT,pch=16,main = column)
}
pisa_data$CNT
unique(pisa_data$CNT)
count_num = as.numeric(pisa_data$CNT)
plot(count_num)
dim(pisa_data)
count_num = as.numeric(pisa_data$CNT[3800])
count_num = as.numeric(pisa_data$CNT)
plot(count_num)
countrys
round(3,2)
round(3,5)
round(3,6)
round(3.1)
round(3.5)
#DIRECTORIES
root_proj_dir = "../../"
dataset_path = paste(root_proj_dir,"data/df_pca_scores.csv",sep="")
include_path = paste(root_proj_dir,"src/include/Utilities.R",sep="")
#INCLUDING UTILITIES
source(include_path)
#IMPORTING THE DATASET
pisa_data <- read.csv(file=dataset_path)
head(pisa_data)
library(rgl)
library(tsne)
library(Rtsne)
data$X<-NULL
countrys = as.factor(pisa_data$CNT)
pisa_data_cut = pisa_data[,2:dim(pisa_data)[2]]
perplex = c(1,30,50)
pdf("high dimensionality plots.pdf")
for(k in perplex){
tsne_results <- Rtsne(pisa_data_cut, perplexity=k, check_duplicates = FALSE, pca=FALSE)
title = paste("Perplexity = ", k)
plot(tsne_results$Y, col = "black", bg= countrys, pch = 21, cex = 1, main = title)
}
dev.off()
pisa_data
data$X<-NULL
pisa_data
pisa_data[1]
data$X<-NULL
countrys = as.factor(pisa_data$CNT)
pisa_data_cut = pisa_data[,3:dim(pisa_data)[2]]
perplex = c(1,30,50)
pdf("high dimensionality plots.pdf")
for(k in perplex){
tsne_results <- Rtsne(pisa_data_cut, perplexity=k, check_duplicates = FALSE, pca=FALSE)
title = paste("Perplexity = ", k)
plot(tsne_results$Y, col = "black", bg= countrys, pch = 21, cex = 1, main = title)
}
dev.off()
tsne_results <- Rtsne(pisa_data_cut,dim=2, perplexity=30, check_duplicates = FALSE, pca=FALSE)
countrys_num <- as.numeric(countrys)
plot(tsne_results$Y, col = "black", bg= countrys, pch = 21, cex = 1, main = "Perplexity = 30")
pisa_data_cut
pisa_data_cut = pisa_data[,3:dim(pisa_data)[2]-1]
tsne_results <- Rtsne(pisa_data_cut,dim=2, perplexity=30, check_duplicates = FALSE, pca=FALSE)
countrys_num <- as.numeric(countrys)
plot(tsne_results$Y, col = "black", bg= countrys, pch = 21, cex = 1, main = "Perplexity = 30")
x11()
countrys_num <- as.numeric(countrys)
plot(tsne_results$Y, col = "black", bg= countrys, pch = 21, cex = 1, main = "Perplexity = 30")
tsne_results
plot(tsne_results$Y, col = "black", bg= countrys, cex = 1, main = "Perplexity = 30")
tsne_results <- Rtsne(pisa_data_cut,dim=2, perplexity=30, check_duplicates = FALSE, pca=FALSE)
x11()
countrys_num <- as.numeric(countrys)
plot(tsne_results$Y, cex = 1, main = "Perplexity = 30")
plot(tsne_results$Y, main = "Perplexity = 30")
dim(pisa_data)[2]
pisa_data_cut = pisa_data[,3:6-1]
tsne_results <- Rtsne(pisa_data_cut,dim=2, perplexity=30, check_duplicates = FALSE, pca=FALSE)
countrys_num <- as.numeric(countrys)
plot(tsne_results$Y, main = "Perplexity = 30")
knitr::opts_knit$set(root.dir = normalizePath("G:/Il mio Drive/UNIVERSITA/APPLIED STATISTICS/LABS/Lab High Visual"))
rm( list = ls() )
list.files()
graphics.off() # chiude tutti i device grafici
cat("\014") #pulisci console
library(RSKC) # <- we need this to upload data
# NOTE: there are two libraries to perform t-SNE in R
library(tsne)
library(Rtsne)
help(tsne)
help(Rtsne) # <-- This library uses a faster more recent algorithm (Barnes-Hult) that is more efficient for large-scale data.
#     Today we will show this version that approximates t-sne. if you want the original algorithm in B-H implementation you should set theta=0.0
## Load dataset
IR <- iris # Loading the iris dataset into a object called IR
head(iris)
## Split IR into two objects: 1) containing measurements 2) containing species type
iris_data <- IR[ ,1:4]
iris_species <- IR[ ,5]
## Run the t-SNE algorithm and store the results into an object called tsne_results
tsne_results <- Rtsne(iris_data, perplexity=10, check_duplicates = FALSE, pca = FALSE, verbose=TRUE, traces=TRUE) # You can change the value of perplexity and see how the plot changes
## Generate the t_SNE plot
par(mfrow=c(1,2))
plot(tsne_results$Y, col = "blue", pch = 19, cex = 1.5) # Plotting the first image
plot(tsne_results$Y, col = "black", bg= iris_species, pch = 21, cex = 1.5) # Second plot: Color the plot by the real species type (bg= iris_species)
setwd("G:/Il mio Drive/UNIVERSITA/APPLIED STATISTICS/LABS/Lab High Visual")
library(RSKC) # <- we need this to upload data
# NOTE: there are two libraries to perform t-SNE in R
library(tsne)
library(Rtsne)
## Load dataset
IR <- iris # Loading the iris dataset into a object called IR
head(iris)
## Split IR into two objects: 1) containing measurements 2) containing species type
iris_data <- IR[ ,1:4]
iris_species <- IR[ ,5]
iris_species
## Run the t-SNE algorithm and store the results into an object called tsne_results
tsne_results <- Rtsne(iris_data, perplexity=10, check_duplicates = FALSE, pca = FALSE, verbose=TRUE, traces=TRUE) # You can change the value of perplexity and see how the plot changes
## Generate the t_SNE plot
x11()
par(mfrow=c(1,2))
plot(tsne_results$Y, col = "blue", pch = 19, cex = 1.5) # Plotting the first image
plot(tsne_results$Y, col = "black", bg= iris_species, pch = 21, cex = 1.5) # Second plot: Color the plot by the real species type (bg= iris_species)
# multidimensional view (scatterplot-matrix)
x11()
plot(iris_data, col='black', bg=iris_species, main = 't-SNE plot of Iris data')
x11()
par(mfrow=c(1,2))
# PCA
pca_iris = princomp(iris_data, scores = T)$scores[,1:2]
plot(pca_iris, col = "black", bg=iris_species, pch = 21, cex = 1.5, main = 'PCA plot of Iris data')
# t-SNE
plot(tsne_results$Y, col = "black", bg=iris_species, pch = 21, cex = 1.5, main = 't-SNE plot of Iris data')
# Just to grasp an intuition of how this algorithm works, let's have a look at what happens if we change the perplexity parameter.
# Again, if you do this experiment on much larger and complex datasets you will see much more significant differences between the plots.
perplex = c(1, 5, 10, 20, 30)
x11()
par(mfrow=c(1,5))
for(k in c(1:5)){
tsne_results <- Rtsne(iris_data, perplexity=perplex[k], check_duplicates = FALSE, pca=FALSE)
title = paste("Perplexity = ", perplex[k])
plot(tsne_results$Y, col = "black", bg= iris_species, pch = 21, cex = 1, main = title)
}
expression_data <- read.table(file = "expression.csv", row.names = 1, sep=',', header = T)
meta_data <- read.table(file = "meta.csv", row.names = 1, sep=',', header = T)
View(expression_data)
cell_type = as.factor(meta_data$cell_type)
# since t-SNE is an iterative algorithm it may take some time to run for very large datasets.
# For this reason, many times for visualization purposes it is recommended to run PCA first.
# The function in R has the pre-built option to perform PCA first, so now we will set this parameter to true
## Run the t-SNE algorithm
tsne_realData <- Rtsne(expression_data, perplexity=100, check_duplicates = FALSE, pca=TRUE)
## Generate the t_SNE plot
x11()
plot(tsne_realData$Y, col = "black", bg= cell_type, pch = 21, cex = 1, main = 't-SNE plot of gene expression data')
# Let's compare our results with pca analysis alone. You will see the algorithm takes the PCA inputs and "separates" the points more
# to aid visualization. For example, now we can recognize the light-blue cluster that was scattered in the middle of the PCA plot.
x11()
par(mfrow=c(1,2))
# PCA
pca_genes = princomp(expression_data, scores = T)$scores[,1:2]
plot(pca_genes, col = "black", bg=cell_type, pch = 21, cex = 1, main = 'PCA')
plot(tsne_realData$Y, col = "black", bg= cell_type, pch = 21, cex = 1, main = 't-SNE')
# Let's compare our results with pca analysis alone. You will see the algorithm takes the PCA inputs and "separates" the points more
# to aid visualization. For example, now we can recognize the light-blue cluster that was scattered in the middle of the PCA plot.
x11()
plot(pca_genes, col = "black", bg=cell_type, pch = 21, cex = 1, main = 'PCA')
pca_genes
# PCA
pca_genes = princomp(expression_data, scores = T)$scores[1:500,1:2]
plot(pca_genes, col = "black", bg=cell_type, pch = 21, cex = 1, main = 'PCA')
plot(pca_genes)
pca_genes
plot(pca_genes)
rm( list = ls() )
list.files()
graphics.off() # chiude tutti i device grafici
cat("\014") #pulisci console
knitr::opts_knit$set(root.dir = normalizePath("G:/Il mio Drive/UNIVERSITA/APPLIED STATISTICS/LABS/Lab High Visual"))
rm( list = ls() )
list.files()
graphics.off() # chiude tutti i device grafici
cat("\014") #pulisci console
library(RSKC) # <- we need this to upload data
# NOTE: there are two libraries to perform t-SNE in R
library(tsne)
library(Rtsne)
## Load dataset
IR <- iris # Loading the iris dataset into a object called IR
head(iris)
## Split IR into two objects: 1) containing measurements 2) containing species type
iris_data <- IR[ ,1:4]
iris_species <- IR[ ,5]
## Run the t-SNE algorithm and store the results into an object called tsne_results
tsne_results <- Rtsne(iris_data, perplexity=10, check_duplicates = FALSE, pca = FALSE, verbose=TRUE, traces=TRUE) # You can change the value of perplexity and see how the plot changes
## Generate the t_SNE plot
par(mfrow=c(1,2))
plot(tsne_results$Y, col = "blue", pch = 19, cex = 1.5) # Plotting the first image
plot(tsne_results$Y, col = "black", bg= iris_species, pch = 21, cex = 1.5) # Second plot: Color the plot by the real species type (bg= iris_species)
plot(iris_data, col='black', bg=iris_species, main = 't-SNE plot of Iris data')
par(mfrow=c(1,2))
# PCA
pca_iris = princomp(iris_data, scores = T)$scores[,1:2]
plot(pca_iris, col = "black", bg=iris_species, pch = 21, cex = 1.5, main = 'PCA plot of Iris data')
knitr::opts_knit$set(root.dir = normalizePath("G:/Il mio Drive/UNIVERSITA/APPLIED STATISTICS/LABS/Lab 3"))
rm( list = ls() )
list.files()
graphics.off() # chiude tutti i device grafici
cat("\014") #pulisci console
food <- read.table('Food.txt', header=T)
tourists <- read.table('tourists.txt', header=T)
tourists = tourists[, -(1:2)]
age <- read.table('scotland.txt', header=T)
rings <- read.table('NO.txt', header=T)
runrec <- read.table('record_mod.txt', header=T)
runrec[,4:7] <- runrec[,4:7]*60
NO <- read.table('NO.txt', header=T)
NO <- data.frame(NO)
var.names <- c("I Control Unit","II Control Unit","III Control Unit","IV Control Unit")
dimnames(NO)[[2]] <- var.names
tourists.mod = tourists
for(i in 1:8) tourists.mod[which(tourists[,i]==0),i] = 1
tourists.log = log(tourists.mod)
NO <- read.table('NO.txt', header=T)
NO <- data.frame(NO)
var.names <- c("I Control Unit","II Control Unit","III Control Unit","IV Control Unit")
dimnames(NO)[[2]] <- var.names
data = NO
head(data)
sd_bool = 2
head(data)
S = cov(data)
Sd = sqrt(diag(S))  #sapply(data,sd)
M = colMeans(data)
var.gen <- det(S)
var.tot <- sum(diag(S))
n <- dim(data)[1]
p <- dim(data)[2]
n
p
boxplot(data, col='gold', main = "Initial boxplot",las = 2)
matplot(t(data), type='l', axes=F)
box()
boxplot(data, add=T, boxwex=0.1, col='red')
par(mar=rep(p,4))
if (sd_bool==2){
data <- scale(data)
data <- data.frame(data)
boxplot(data, col='gold',las=2,main = "scaled -standardiezed- boxplot")
}
if(sd_bool == 1){
data <-scale(x=data, center=T, scale=F)
data <- data.frame(data)
boxplot(data, col='gold',las=2,main = "scaled -centered- boxplot")
}
pc.data <- princomp(data, scores=T)
print(summary(pc.data))
first_pc  = 3
#x11()
par(mfcol=c(first_pc,1))
for(i in 1:first_pc) barplot(load.data[,i] ,las=2,ylim = c(-1, 1), main=paste("PC Loadings",i))
load.data <- pc.data$loadings
#x11()
par(mfcol=c(first_pc,1))
for(i in 1:first_pc) barplot(load.data[,i] ,las=2,ylim = c(-1, 1), main=paste("PC Loadings",i))
#x11()
scores.data <- pc.data$scores
plot(scores.data[, 1:2])
abline(h=0, v=0, lty=2, col="grey")
plot(scores.data[, 1],scores.data[,2])
scores.data
plot(scores.data[,1:2])
str(scores.data)
typeof(scores.data)
setwd("C:/Users/modin/Desktop/Ettore/UNIVERSITA/PISA_PROJECT/progetto-applied/src/exploratory-analysis")
tsne_results
#DIRECTORIES
root_proj_dir = "../../"
dataset_path = paste(root_proj_dir,"data/df_pca_scores.csv",sep="")
include_path = paste(root_proj_dir,"src/include/Utilities.R",sep="")
#INCLUDING UTILITIES
source(include_path)
#IMPORTING THE DATASET
pisa_data <- read.csv(file=dataset_path)
head(pisa_data)
library(rgl)
library(tsne)
library(Rtsne)
data$X<-NULL
countrys = as.factor(pisa_data$CNT)
pisa_data_cut = pisa_data[,3:dim(pisa_data)[2]-1]
perplex = c(1,30,50)
tsne_results <- Rtsne(pisa_data_cut,dim=2, perplexity=30, check_duplicates = FALSE, pca=FALSE)
countrys_num <- as.numeric(countrys)
plot(tsne_results$Y, main = "Perplexity = 30")
tsne_results$Y
plot(tsne_results$Y[,1],tsne_results$Y[,2], main = "Perplexity = 30")
plot(tsne_results$Y[,1],tsne_results$Y[,2],col=countrys_num, main = "Perplexity = 30")
data$X<-NULL
countrys = as.factor(pisa_data$CNT)
pisa_data_cut = pisa_data[,3:dim(pisa_data)[2]-1]
perplex = c(1,30,50)
pdf("high dimensionality plots.pdf")
for(k in perplex){
tsne_results <- Rtsne(pisa_data_cut, perplexity=k, check_duplicates = FALSE, pca=FALSE)
title = paste("Perplexity = ", k)
plot(tsne_results$Y[,1],tsne_results$Y[,2], col = "black", bg= countrys, pch = 21, cex = 1, main = title)
}
dev.off()
detach(package:rgl, unload = TRUE)
#DIRECTORIES
root_proj_dir = "../../"
dataset_path = paste(root_proj_dir,"data/df_pca_scores.csv",sep="")
include_path = paste(root_proj_dir,"src/include/Utilities.R",sep="")
#INCLUDING UTILITIES
source(include_path)
#IMPORTING THE DATASET
pisa_data <- read.csv(file=dataset_path)
head(pisa_data)
library(tsne)
library(Rtsne)
data$X<-NULL
countrys = as.factor(pisa_data$CNT)
pisa_data_cut = pisa_data[,3:dim(pisa_data)[2]-1]
pisa_data_cut
pisa_data_cut = pisa_data[,3:dim(pisa_data)[2]-1]
pisa_data_cut
pisa_data_cut
pisa_data_cut = pisa_data[,4:dim(pisa_data)[2]-1]
pisa_data_cut
pisa_data
dim(pisa_data)[2]
pisa_data_cut = pisa_data[,4:dim(pisa_data)[2]-1]
pisa_data[,1]
colnames(pisa_data)[1]
colnames(pisa_data)[2]
colnames(pisa_data)[3]
#DIRECTORIES
root_proj_dir = "../../"
dataset_path = paste(root_proj_dir,"data/df_pca_scores.csv",sep="")
include_path = paste(root_proj_dir,"src/include/Utilities.R",sep="")
#INCLUDING UTILITIES
source(include_path)
#IMPORTING THE DATASET
pisa_data <- read.csv(file=dataset_path)
head(pisa_data)
library(tsne)
library(Rtsne)
countrys = as.factor(pisa_data$CNT)
pisa_data_cut = pisa_data[,2:dim(pisa_data)[2]-1]
pisa_data_cut
2:dim(pisa_data)[2]-1
2:(dim(pisa_data)[2]-1)
pisa_data_cut = pisa_data[,2:(dim(pisa_data)[2]-1)]
pisa_data_cut
pisa_data_cut = pisa_data[,3:(dim(pisa_data)[2]-1)]
pisa_data_cut
tsne_results <- Rtsne(pisa_data_cut,dim=2, perplexity=30, check_duplicates = FALSE, pca=FALSE)
x11()
countrys_num <- as.numeric(countrys)
plot(tsne_results$Y[,1],tsne_results$Y[,2],col=countrys_num, main = "Perplexity = 30")
plot(tsne_results$Y,col=countrys_num, main = "Perplexity = 30")
