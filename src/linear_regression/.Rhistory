Xsm0bis <- Xsm0bis$y
Xsm1bis <- locpoly(abscissa,Xobs0,drv=1,degree=degree,bandwidth=bw,gridsize=length(abscissa), range.x=range(abscissa))
Xsm1bis <- Xsm1bis$y
Xsm2bis <- locpoly(abscissa,Xobs0,drv=2,degree=degree,bandwidth=bw,gridsize=length(abscissa), range.x=range(abscissa))
Xsm2bis <- Xsm2bis$y
par(mfrow=c(1,3))
plot(abscissa,Xobs0,xlab="t",ylab="observed data")
points(abscissa,Xsm0bis ,type="l",col="green",lwd=2)
points(abscissa,Xsm0 ,type="l",col="blue",lwd=2)
plot(abscissa[2:(NT-1)],rappincX1,xlab="t",ylab="first differences x",type="l")
points(abscissa,Xsm1bis ,type="l",col="green",lwd=2)
points(abscissa,Xsm1 ,type="l",col="blue",lwd=2)
plot(abscissa[2:(NT-1)],rappincX2,xlab="t",ylab="second differences x",type="l")
points(abscissa,Xsm2bis ,type="l",col="green",lwd=2)
points(abscissa,Xsm2 ,type="l",col="blue",lwd=2)
# a too large bandwidth leads to oversmoothing
bw <- 0.015
Xsm0ter <- locpoly(abscissa,Xobs0,drv=0,degree=degree,bandwidth=bw,gridsize=length(abscissa), range.x=range(abscissa))
Xsm0ter <- Xsm0ter$y
Xsm1ter <- locpoly(abscissa,Xobs0,drv=1,degree=degree,bandwidth=bw,gridsize=length(abscissa), range.x=range(abscissa))
Xsm1ter <- Xsm1ter$y
Xsm2ter <- locpoly(abscissa,Xobs0,drv=2,degree=degree,bandwidth=bw,gridsize=length(abscissa), range.x=range(abscissa))
Xsm2ter <- Xsm2ter$y
par(mfrow=c(1,3))
plot(abscissa,Xobs0,xlab="t",ylab="observed data")
points(abscissa,Xsm0ter ,type="l",col="red",lwd=2)
points(abscissa,Xsm0bis ,type="l",col="green",lwd=2)
points(abscissa,Xsm0 ,type="l",col="blue",lwd=2)
plot(abscissa[2:(NT-1)],rappincX1,xlab="t",ylab="first differences x",type="l")
points(abscissa,Xsm1ter ,type="l",col="red",lwd=2)
points(abscissa,Xsm1bis ,type="l",col="green",lwd=2)
points(abscissa,Xsm1 ,type="l",col="blue",lwd=2)
plot(abscissa[2:(NT-1)],rappincX2,xlab="t",ylab="second differences x",type="l")
points(abscissa,Xsm2ter ,type="l",col="red",lwd=2)
points(abscissa,Xsm2bis ,type="l",col="green",lwd=2)
points(abscissa,Xsm2 ,type="l",col="blue",lwd=2)
# Recommendation: when choosing the bandwidth, look at the
# derivatives vs central finite differences
help(smooth.pos)
help(growth)
names(growth)
matplot(growth$age, growth$hgtf, type = "l")
# If we neglect considering that the curves must be monotone...
age <- growth$age
heightbasis12 <- create.bspline.basis(rangeval = c(1,18), nbasis = 12, norder = 6)
basismat <- eval.basis(evalarg = growth$age, basisobj = heightbasis12)
heightmat <- growth$hgtf
heightcoef <- lsfit(x = basismat, y = heightmat, intercept=FALSE)$coef
height <- basismat %*% lsfit(basismat, heightmat, intercept=FALSE)$coef
basismat1 <- eval.basis(evalarg = growth$age, basisobj = heightbasis12,
Lfdobj=1)
heightvelocity <- basismat1 %*% lsfit(x = basismat, y = heightmat,
intercept=FALSE)$coef
basismat2 <- eval.basis(evalarg = growth$age, basisobj = heightbasis12,Lfdobj=2)
heightacceleration <- basismat2 %*% lsfit(x=basismat, y= heightmat, intercept=FALSE)$coef
par(mfrow=c(1,3))
matplot(age,height,type="l" )
matplot(age,heightvelocity,type="l" )
abline(h=0)
matplot(age,heightacceleration,type="l")
par(mfrow=c(1,2))
matplot(age,height,type="l" )
matplot(age[-c(1,2,3,31)],heightvelocity[-c(1,2,3,31),],type="l" )
abline(h=0)
nage <- length(age)
ageRng <- range(age)
nfine <- 101
agefine <- seq(ageRng[1], ageRng[2], length=nfine)
# Let's consider only the first 5 girls
hgtf <- growth$hgtf[,1:5]
ncasef <- dim(hgtf)[2]
# We set up an order 6 spline basis with knots at ages of observations
norder <- 6
nbasis <- nage - 2 + norder
wbasis <- create.bspline.basis(rangeval = ageRng, nbasis = nbasis,
norder = norder, breaks = age)
# We construct the functional parameter with penalization of the third
# derivative
Lfdobj <- 3
lambda <- 10^(-0.5)
cvecf <- matrix(0, nbasis, ncasef) # this is used as initial value
# for the numerical techniques
Wfd0 <- fd(coef = cvecf, basisobj = wbasis)
growfdPar <- fdPar(fdobj = Wfd0, Lfdobj = Lfdobj, lambda = lambda)
# We carry out a monotone smoothing
help(smooth.monotone)
growthMon <- smooth.monotone(argvals = age, y = hgtf, WfdParobj = growfdPar)
Wfd <- growthMon$Wfd
betaf <- growthMon$beta
hgtfhatfd <- growthMon$yhatfd
velocfdUN <- deriv.fd(expr = hgtfhatfd, Lfdobj = 1)
velocmeanfdUN <- mean.fd(velocfdUN)
accelfdUN <- deriv.fd(expr = hgtfhatfd, Lfdobj = 2)
accelmeanfdUN <- mean.fd(accelfdUN)
par(mfrow=c(2,2),mar=c(6,5,2,1),mex=0.6, mgp=c(2.2,0.7,0),pty="m", font.main=1,font.lab=1, font.axis=1,cex.lab=1.3,cex.axis=1)
plot(hgtfhatfd, xlim=c(1,18), lty=1, lwd=2,
cex=2, xlab="Age", ylab="Growth (cm)")
plot(velocfdUN, xlim=c(1,18),  lty=1, lwd=2,
cex=2, xlab="Age", ylab="Velocity (cm/yr)")
plot(accelfdUN, xlim=c(1,18), ylim=c(-4,3), lty=1, lwd=2,
cex=2, xlab="Age", ylab="Acceleration (cm/yr/yr)")
plot(wbasis)
noisycurve3D <- read.table("noisycurve3D.txt",header=T)
Xobs0 <- noisycurve3D$X0
Yobs0 <- noisycurve3D$Y0
Zobs0 <- noisycurve3D$Z0
obs0 <- rbind(Xobs0,Yobs0,Zobs0)
abscissa <- noisycurve3D$Abscissa
NT <- length(abscissa)
truecurve3D <- read.table("truecurve3D.txt",header=T)
Xtrue0 <- truecurve3D$X0
Ytrue0 <- truecurve3D$Y0
Ztrue0 <- truecurve3D$Z0
true0 <- rbind(Xtrue0,Ytrue0,Ztrue0)
rappincX1 <- (Xobs0[3:NT]-Xobs0[1:(NT-2)])/(abscissa[3:NT]-abscissa[1:(NT-2)])
rappincY1 <- (Yobs0[3:NT]-Yobs0[1:(NT-2)])/(abscissa[3:NT]-abscissa[1:(NT-2)])
rappincZ1 <- (Zobs0[3:NT]-Zobs0[1:(NT-2)])/(abscissa[3:NT]-abscissa[1:(NT-2)])
rappincX2 <- ((Xobs0[3:NT]-Xobs0[2:(NT-1)])/(abscissa[3:NT]-abscissa[2:(NT-1)])-(Xobs0[2:(NT-1)]-Xobs0[1:(NT-2)])/(abscissa[2:(NT-1)]-abscissa[1:(NT-2)]))*2/(abscissa[3:(NT)]-abscissa[1:(NT-2)])
rappincY2 <- ((Yobs0[3:NT]-Yobs0[2:(NT-1)])/(abscissa[3:NT]-abscissa[2:(NT-1)])-(Yobs0[2:(NT-1)]-Yobs0[1:(NT-2)])/(abscissa[2:(NT-1)]-abscissa[1:(NT-2)]))*2/(abscissa[3:(NT)]-abscissa[1:(NT-2)])
rappincZ2 <- ((Zobs0[3:NT]-Zobs0[2:(NT-1)])/(abscissa[3:NT]-abscissa[2:(NT-1)])-(Zobs0[2:(NT-1)]-Zobs0[1:(NT-2)])/(abscissa[2:(NT-1)]-abscissa[1:(NT-2)]))*2/(abscissa[3:(NT)]-abscissa[1:(NT-2)])
par(mfrow=c(3,3),mar=c(6,5,2,1),mex=0.6, mgp=c(2.2,0.7,0),pty="m", font.main=1,font.lab=1, font.axis=1,cex.lab=1.3,cex.axis=1)
plot(abscissa,obs0[1,],xlab=expression(tilde(s)),ylab="observed data x",cex=0.1,asp=1)
plot(abscissa,obs0[2,],xlab=expression(tilde(s)),ylab="observed data y",cex=0.1,asp=1)
plot(abscissa,obs0[3,],xlab=expression(tilde(s)),ylab="observed data z",cex=0.1,asp=1)
plot(abscissa[2:(NT-1)],rappincX1,xlab=expression(tilde(s)),ylab="first differences x",type="l",asp=1)
plot(abscissa[2:(NT-1)],rappincY1,xlab=expression(tilde(s)),ylab="first differences y",type="l",asp=1)
plot(abscissa[2:(NT-1)],rappincZ1,xlab=expression(tilde(s)),ylab="first differences z",type="l",asp=1)
plot(abscissa[2:(NT-1)],rappincX2,xlab=expression(tilde(s)),ylab="second differences x",type="l")
plot(abscissa[2:(NT-1)],rappincY2,xlab=expression(tilde(s)),ylab="second differences y",type="l")
plot(abscissa[2:(NT-1)],rappincZ2,xlab=expression(tilde(s)),ylab="second differences z",type="l")
bw <- 0.05
Xsm0 <- locpoly(abscissa,Xobs0,degree=degree,bandwidth=bw,gridsize=length(abscissa), range.x=range(abscissa))
Xsm0 <- Xsm0$y
Xsm1 <- locpoly(abscissa,Xobs0,drv=1,degree=degree,bandwidth=bw,gridsize=length(abscissa), range.x=range(abscissa))
Xsm1 <- Xsm1$y
Xsm2 <- locpoly(abscissa,Xobs0,drv=2,degree=degree,bandwidth=bw,gridsize=length(abscissa), range.x=range(abscissa))
Xsm2 <- Xsm2$y
Ysm0 <- locpoly(abscissa,Yobs0,degree=degree,bandwidth=bw,gridsize=length(abscissa), range.x=range(abscissa))
Ysm0 <- Ysm0$y
Ysm1 <- locpoly(abscissa,Yobs0,drv=1,degree=degree,bandwidth=bw,gridsize=length(abscissa), range.x=range(abscissa))
Ysm1 <- Ysm1$y
Ysm2 <- locpoly(abscissa,Yobs0,drv=2,degree=degree,bandwidth=bw,gridsize=length(abscissa), range.x=range(abscissa))
Ysm2 <- Ysm2$y
Zsm0 <- locpoly(abscissa,Zobs0,degree=degree,bandwidth=bw,gridsize=length(abscissa), range.x=range(abscissa))
Zsm0 <- Zsm0$y
Zsm1 <- locpoly(abscissa,Zobs0,drv=1,degree=degree,bandwidth=bw,gridsize=length(abscissa), range.x=range(abscissa))
Zsm1 <- Zsm1$y
Zsm2 <- locpoly(abscissa,Zobs0,drv=2,degree=degree,bandwidth=bw,gridsize=length(abscissa), range.x=range(abscissa))
Zsm2 <- Zsm2$y
par(mfrow=c(3,3),mar=c(6,5,2,1),mex=0.6, mgp=c(2.2,0.7,0),pty="m", font.main=1,font.lab=1, font.axis=1,cex.lab=1.3,cex.axis=1)
plot(abscissa,obs0[1,],xlab="s",ylab="x",cex=0.1,asp=1,xlim=c(0,1))
points(abscissa,Xsm0,type="l",col="blue",lwd=2)
plot(abscissa,obs0[2,],xlab="s",ylab="y",cex=0.1,asp=1,xlim=c(0,1))
points(abscissa,Ysm0,type="l",col="blue",lwd=2)
plot(abscissa,obs0[3,],xlab="s",ylab="z",cex=0.1,asp=1,xlim=c(0,1))
points(abscissa,Zsm0,type="l",col="blue",lwd=2)
plot(abscissa[2:(NT-1)],rappincX1,xlab="s",ylab="x'",type="l",ylim=c(-0.5,0.5),xlim=c(0,1))
points(abscissa,Xsm1,type="l",col="blue",lwd=2)
plot(abscissa[2:(NT-1)],rappincY1,xlab="s",ylab="y'",type="l",ylim=c(-0.5,0.5),xlim=c(0,1))
points(abscissa,Ysm1,type="l",col="blue",lwd=2)
plot(abscissa[2:(NT-1)],rappincZ1,xlab="s",ylab="z'",type="l",ylim=c(-0.5,0.5),xlim=c(0,1))
points(abscissa,Zsm1,type="l",col="blue",lwd=2)
plot(abscissa[2:(NT-1)],rappincX2,xlab="s",ylab="x''",type="l")
points(abscissa,Xsm2,type="l",col="blue",lwd=2)
plot(abscissa[2:(NT-1)],rappincY2,xlab="s",ylab="y''",type="l")
points(abscissa,Ysm2,type="l",col="blue",lwd=2)
plot(abscissa[2:(NT-1)],rappincZ2,xlab="s",ylab="z''",type="l")
points(abscissa,Zsm2,type="l",col="blue",lwd=2)
rappincX1 <- (Xobs0[3:NT]-Xobs0[1:(NT-2)])/(abscissa[3:NT]-abscissa[1:(NT-2)])
rappincY1 <- (Yobs0[3:NT]-Yobs0[1:(NT-2)])/(abscissa[3:NT]-abscissa[1:(NT-2)])
rappincZ1 <- (Zobs0[3:NT]-Zobs0[1:(NT-2)])/(abscissa[3:NT]-abscissa[1:(NT-2)])
rappincX2 <- ((Xobs0[3:NT]-Xobs0[2:(NT-1)])/(abscissa[3:NT]-abscissa[2:(NT-1)])-(Xobs0[2:(NT-1)]-Xobs0[1:(NT-2)])/(abscissa[2:(NT-1)]-abscissa[1:(NT-2)]))*2/(abscissa[3:(NT)]-abscissa[1:(NT-2)])
rappincY2 <- ((Yobs0[3:NT]-Yobs0[2:(NT-1)])/(abscissa[3:NT]-abscissa[2:(NT-1)])-(Yobs0[2:(NT-1)]-Yobs0[1:(NT-2)])/(abscissa[2:(NT-1)]-abscissa[1:(NT-2)]))*2/(abscissa[3:(NT)]-abscissa[1:(NT-2)])
rappincZ2 <- ((Zobs0[3:NT]-Zobs0[2:(NT-1)])/(abscissa[3:NT]-abscissa[2:(NT-1)])-(Zobs0[2:(NT-1)]-Zobs0[1:(NT-2)])/(abscissa[2:(NT-1)]-abscissa[1:(NT-2)]))*2/(abscissa[3:(NT)]-abscissa[1:(NT-2)])
par(mfrow=c(3,3),mar=c(6,5,2,1),mex=0.6, mgp=c(2.2,0.7,0),pty="m", font.main=1,font.lab=1, font.axis=1,cex.lab=1.3,cex.axis=1)
plot(abscissa,obs0[1,],xlab=expression(tilde(s)),ylab="observed data x",cex=0.1,asp=1)
plot(abscissa,obs0[2,],xlab=expression(tilde(s)),ylab="observed data y",cex=0.1,asp=1)
plot(abscissa,obs0[3,],xlab=expression(tilde(s)),ylab="observed data z",cex=0.1,asp=1)
plot(abscissa[2:(NT-1)],rappincX1,xlab=expression(tilde(s)),ylab="first differences x",type="l",asp=1)
plot(abscissa[2:(NT-1)],rappincY1,xlab=expression(tilde(s)),ylab="first differences y",type="l",asp=1)
plot(abscissa[2:(NT-1)],rappincZ1,xlab=expression(tilde(s)),ylab="first differences z",type="l",asp=1)
plot(abscissa[2:(NT-1)],rappincX2,xlab=expression(tilde(s)),ylab="second differences x",type="l")
plot(abscissa[2:(NT-1)],rappincY2,xlab=expression(tilde(s)),ylab="second differences y",type="l")
plot(abscissa[2:(NT-1)],rappincZ2,xlab=expression(tilde(s)),ylab="second differences z",type="l")
bw <- 0.05
Xsm0 <- locpoly(abscissa,Xobs0,degree=degree,bandwidth=bw,gridsize=length(abscissa), range.x=range(abscissa))
Xsm0 <- Xsm0$y
Xsm1 <- locpoly(abscissa,Xobs0,drv=1,degree=degree,bandwidth=bw,gridsize=length(abscissa), range.x=range(abscissa))
Xsm1 <- Xsm1$y
Xsm2 <- locpoly(abscissa,Xobs0,drv=2,degree=degree,bandwidth=bw,gridsize=length(abscissa), range.x=range(abscissa))
Xsm2 <- Xsm2$y
Ysm0 <- locpoly(abscissa,Yobs0,degree=degree,bandwidth=bw,gridsize=length(abscissa), range.x=range(abscissa))
Ysm0 <- Ysm0$y
Ysm1 <- locpoly(abscissa,Yobs0,drv=1,degree=degree,bandwidth=bw,gridsize=length(abscissa), range.x=range(abscissa))
Ysm1 <- Ysm1$y
Ysm2 <- locpoly(abscissa,Yobs0,drv=2,degree=degree,bandwidth=bw,gridsize=length(abscissa), range.x=range(abscissa))
Ysm2 <- Ysm2$y
Zsm0 <- locpoly(abscissa,Zobs0,degree=degree,bandwidth=bw,gridsize=length(abscissa), range.x=range(abscissa))
Zsm0 <- Zsm0$y
Zsm1 <- locpoly(abscissa,Zobs0,drv=1,degree=degree,bandwidth=bw,gridsize=length(abscissa), range.x=range(abscissa))
Zsm1 <- Zsm1$y
Zsm2 <- locpoly(abscissa,Zobs0,drv=2,degree=degree,bandwidth=bw,gridsize=length(abscissa), range.x=range(abscissa))
Zsm2 <- Zsm2$y
par(mfrow=c(3,3),mar=c(6,5,2,1),mex=0.6, mgp=c(2.2,0.7,0),pty="m", font.main=1,font.lab=1, font.axis=1,cex.lab=1.3,cex.axis=1)
plot(abscissa,obs0[1,],xlab="s",ylab="x",cex=0.1,asp=1,xlim=c(0,1))
points(abscissa,Xsm0,type="l",col="blue",lwd=2)
plot(abscissa,obs0[2,],xlab="s",ylab="y",cex=0.1,asp=1,xlim=c(0,1))
points(abscissa,Ysm0,type="l",col="blue",lwd=2)
plot(abscissa,obs0[3,],xlab="s",ylab="z",cex=0.1,asp=1,xlim=c(0,1))
points(abscissa,Zsm0,type="l",col="blue",lwd=2)
plot(abscissa[2:(NT-1)],rappincX1,xlab="s",ylab="x'",type="l",ylim=c(-0.5,0.5),xlim=c(0,1))
points(abscissa,Xsm1,type="l",col="blue",lwd=2)
plot(abscissa[2:(NT-1)],rappincY1,xlab="s",ylab="y'",type="l",ylim=c(-0.5,0.5),xlim=c(0,1))
points(abscissa,Ysm1,type="l",col="blue",lwd=2)
plot(abscissa[2:(NT-1)],rappincZ1,xlab="s",ylab="z'",type="l",ylim=c(-0.5,0.5),xlim=c(0,1))
points(abscissa,Zsm1,type="l",col="blue",lwd=2)
plot(abscissa[2:(NT-1)],rappincX2,xlab="s",ylab="x''",type="l")
points(abscissa,Xsm2,type="l",col="blue",lwd=2)
plot(abscissa[2:(NT-1)],rappincY2,xlab="s",ylab="y''",type="l")
points(abscissa,Ysm2,type="l",col="blue",lwd=2)
plot(abscissa[2:(NT-1)],rappincZ2,xlab="s",ylab="z''",type="l")
points(abscissa,Zsm2,type="l",col="blue",lwd=2)
## point a)
# generalized cross-validation
nbasis <- 6:50
gcv <- numeric(length(nbasis))
for (i in 1:length(nbasis)){
basis <- create.fourier.basis(range(abscissa), nbasis[i])
gcv[i] <- smooth.basis(abscissa, Xobs0, basis)$gcv
}
par(mfrow=c(1,1))
plot(nbasis,gcv)
nbasis[which.min(gcv)]
abline(v=nbasis[which.min(gcv)],col='red')
basis <- create.fourier.basis(rangeval=range(abscissa), nbasis=nbasis[which.min(gcv)])
plot(basis)
Xsp <- smooth.basis(argvals=abscissa, y=Xobs0, fdParobj=basis)
Xsp0bis <- eval.fd(abscissa, Xsp$fd) #  the curve smoothing the data
plot(abscissa,Xobs0,xlab="t",ylab="observed data")
points(abscissa,Xsp0bis ,type="l",col="red",lwd=2)
## point b)
# compute the central finite differences
rappincX1 <- (Xobs0[3:NT]-Xobs0[1:(NT-2)])/(abscissa[3:NT]-abscissa[1:(NT-2)])
Xsp1bis <- eval.fd(abscissa, Xsp$fd, Lfd=1) # first derivative
plot(abscissa[2:(NT-1)],rappincX1,xlab="t",ylab="first differences x",type="l")
points(abscissa,Xsp1bis,type='l',col="orange",lwd=3)
NT
## point c)
# oversmoothing
nbasis <- 5
basis <- create.fourier.basis(rangeval=range(abscissa), nbasis=nbasis)
Xsp <- smooth.basis(argvals=abscissa, y=Xobs0, fdParobj=basis)
Xsp0bis <- eval.fd(abscissa, Xsp$fd) #  the curve smoothing the data
plot(abscissa,Xobs0,xlab="t",ylab="observed data")
points(abscissa,Xsp0bis ,type="l",col="red",lwd=2)
library(fda)
knitr::opts_knit$set(root.dir = normalizePath("G:/Il mio Drive/UNIVERSITA/APPLIED STATISTICS/LABS/Lab fda"))
rm( list = ls() )
list.files()
graphics.off() # chiude tutti i device grafici
cat("\014") #pulisci console
library(fda)
library(KernSmooth)
library(rgl)
library(fields)
library(fdakma)
# DATA FORMAT
#
#          |------------|------------|----|------------|
#          | location_1 | location_2 | .. | location_n |
# |--------|------------|------------|----|------------|
# | time_1 |     ..     |     ..     | .. |     ..     |
# | time_2 |     ..     |     ..     | .. |     ..     |
# |   ..   |     ..     |     ..     | .. |     ..     |
# |--------|------------|------------|----|------------|
#
# If it's not like that (but transposed): data = t(data)
knitr::opts_knit$set(root.dir = normalizePath("G:/Il mio Drive/UNIVERSITA/APPLIED STATISTICS/LABS/Lab fda"))
rm( list = ls() )
list.files()
graphics.off() # chiude tutti i device grafici
cat("\014") #pulisci console
library(fda)
library(KernSmooth)
library(rgl)
library(fields)
library(fdakma)
data = CanadianWeather$dailyAv[,,1]
head(data)
dim(data)
n = dim(data)[2]
matplot(data, type='l', xlab='time', ylab='feat')
time = 1:dim(data)[1]
NT = length(time)
nbasis = 10
basis.1 = create.fourier.basis(rangeval = c(0,dim(data)[1]), nbasis = nbasis)
plot(basis.1)
data.fd.1 = Data2fd(y = data, argvals = time, basisobj = basis.1)
plot.fd(data.fd.1)
# "Report the first 3 coefficients of St. Johns"
as.numeric(data.fd.1$coefs[1:3, 'St. Johns'])
m = 5 # spline order
degree = m-1 # spline degree
nbasis = 9 # number of basis
basis.2 = create.bspline.basis(rangeval = c(0,dim(data)[1]), nbasis = nbasis)
plot(basis.2)
data.fd.2 = Data2fd(y = data, argvals = time, basisobj = basis.2)
plot.fd(data.fd.2)
m = 5 # spline order
degree = m-1 # spline degree
breaks = time[((0:floor(NT/2))*2)+1]
basis.3 = create.bspline.basis(breaks, norder = m)
plot(basis.3)
data.fd.3 = Data2fd(y = data, argvals = time, basisobj = basis.3)
plot.fd(data.fd.3)
# curve: data[,1]
# basis: basis.1
# Smooth curve
basismat0 = eval.basis(time, basis.1)
Xsp0 = basismat0 %*% lsfit(basismat0, data[,1], intercept=F)$coef
plot(time, data[,1])
points(time, Xsp0, type='l', col='blue', lwd=2)
# First derivative
#   finite differences
NT = dim(data)[2]
rappincX1 = (data[3:NT,1]-data[1:(NT-2),1])/(time[3:NT]-time[1:(NT-2)])
basismat1 = eval.basis(time, basis.1, Lfdobj=1)
Xsp1 = basismat1 %*% lsfit(basismat0, data[,1], intercept=F)$coef
plot(time[2:(NT-1)], rappincX1, xlab='t', ylab='first derivative', type='l')
points(time, Xsp1, type='l', col='orange', lwd=3)
# Second derivative
#   finite differences
rappincX2 = ((data[3:NT,1]-data[2:(NT-1),1])/(time[3:NT]-time[2:(NT-1)])-
(data[2:(NT-1)]-data[1:(NT-2)])/(time[2:(NT-1)]-time[1:(NT-2)]))*
2/(time[3:(NT)]-time[1:(NT-2)])
basismat2 = eval.basis(time, basis.1, Lfdobj=2)
Xsp2 = basismat2 %*% lsfit(basismat0, data[,1], intercept=F)$coef
plot(time[2:(NT-1)], rappincX2, xlab="t", ylab="second derivative", type="l")
points(time, Xsp2, type='l', col="orange", lwd=3)
S = basismat0 %*% solve(t(basismat0) %*% basismat0) %*% t(basismat0) #projector
sigmahat = sqrt(sum((data[,1]-data[,1])^2)/(NT-nbasis)) #estimate of sigma
lb = Xsp0 - qnorm(0.975) * sigmahat * sqrt(diag(S))
ub = Xsp0 + qnorm(0.975) * sigmahat * sqrt(diag(S))
plot( time, Xsp0, type="l", col="blue", lwd=2, ylab="")
points(time, lb, type="l", col="red", lwd=2, lty="dashed",)
points(time, ub, type="l", col="red", lwd=2, lty="dashed")
# basis: bspline (m=5)
nbasis = 6:150
gcv = numeric(length(nbasis))
for (i in 1:length(nbasis)){
basis = create.bspline.basis(c(0,dim(data)[1]), nbasis[i], m)
gcv[i] = smooth.basis(time, data[,1], basis)$gcv
}
plot(nbasis, gcv)
nbasis[which.min(gcv)]
# Mean
plot.fd(data.fd.1)
lines(mean.fd(data.fd.1), lwd=3)
plot.fd(data.fd.2)
lines(mean.fd(data.fd.2), lwd=3)
plot.fd(data.fd.3)
lines(mean.fd(data.fd.3), lwd=3)
# Covariance
eval.1 = eval.fd(time, data.fd.1)
image.plot(cov(t(eval.1)))
eval.2 = eval.fd(time, data.fd.2)
image.plot(cov(t(eval.2)))
eval.3 = eval.fd(time, data.fd.3)
image.plot(cov(t(eval.3)))
pca.data = pca.fd(data.fd.1, nharm=5, centerfns=T) # nharm = number of PC's
# PCA compute all the pc's, but only n-1 are not null
plot(pca.data$values, xlab='j', ylab='Eigenvalues')
plot(pca.data$values[1:n], xlab='j', ylab='Eigenvalues')
plot(cumsum(pca.data$values)[1:n]/sum(pca.data$values), xlab='j', ylab='CPV')
# Explained variance
pca.data$varprop
# First PC
plot(pca.data$harmonics[1,], col=1, ylab='FPC1', ylim=c(-0.1,0.08))
# Second PC
plot(pca.data$harmonics[2,], col=2, ylab='FPC2', ylim=c(-0.1,0.08))
# Plot of FPCs as perturbation of the mean
par(mfrow=c(1,2))
plot.pca.fd(pca.data)
# Scatterplot of the scores
par(mfrow=c(1,2))
plot(pca.data$scores[,1], pca.data$scores[,2], xlab="Scores FPC1",ylab="Scores FPC2",lwd=2)
points(pca.data$scores[n,1], pca.data$scores[n,2],col=2, lwd=4)
plot(pca.data$scores[,1], pca.data$scores[,2],type="n",xlab="Scores FPC1",
ylab="Scores FPC2")
text(pca.data$scores[,1], pca.data$scores[,2], dimnames(data)[[2]], cex=1)
# Outliers
head(data)
par(mfrow=c(1,1))
matplot(eval.1, type='l')
lines(eval.1[,35], lwd=4, col=2)
layout(cbind(1,2,3))
pca_L = pca.data
plot(pca_L$scores[,1],pca_L$scores[,2],xlab="Scores FPC1",ylab="Scores FPC2",lwd=2)
# points(pca_L$scores[12,1],pca_L$scores[12,2],col=2, lwd=4)
plot(pca_L$scores[,1],pca_L$scores[,3],xlab="Scores FPC1",ylab="Scores FPC3",lwd=2)
# points(pca_L$scores[12,1],pca_L$scores[12,3],col=2, lwd=4)
plot(pca_L$scores[,2],pca_L$scores[,3],xlab="Scores FPC2",ylab="Scores FPC3",lwd=2)
# points(pca_L$scores[12,2],pca_L$scores[12,3],col=2, lwd=4)
m = 5 # spline order
degree = m-1 # spline degree
nbasis = 9 # number of basis
basis.2 = create.bspline.basis(rangeval = c(0,dim(data)[1]), nbasis = nbasis)
plot(basis.2)
data.fd.2 = Data2fd(y = data, argvals = time, basisobj = basis.2)
plot.fd(data.fd.2)
pca.data = pca.fd(data.fd.1, nharm=5, centerfns=T) # nharm = number of PC's
# PCA compute all the pc's, but only n-1 are not null
plot(pca.data$values, xlab='j', ylab='Eigenvalues')
plot(pca.data$values[1:n], xlab='j', ylab='Eigenvalues')
plot(cumsum(pca.data$values)[1:n]/sum(pca.data$values), xlab='j', ylab='CPV')
# Explained variance
pca.data$varprop
# First PC
plot(pca.data$harmonics[1,], col=1, ylab='FPC1', ylim=c(-0.1,0.08))
# Second PC
plot(pca.data$harmonics[2,], col=2, ylab='FPC2', ylim=c(-0.1,0.08))
# Plot of FPCs as perturbation of the mean
par(mfrow=c(1,2))
plot.pca.fd(pca.data)
pca.data = pca.fd(data.fd.1, nharm=5, centerfns=T) # nharm = number of PC's
# PCA compute all the pc's, but only n-1 are not null
plot(pca.data$values, xlab='j', ylab='Eigenvalues')
plot(pca.data$values[1:n], xlab='j', ylab='Eigenvalues')
plot(cumsum(pca.data$values)[1:n]/sum(pca.data$values), xlab='j', ylab='CPV')
# Explained variance
pca.data$varprop
# First PC
plot(pca.data$harmonics[1,], col=1, ylab='FPC1', ylim=c(-0.1,0.08))
# Second PC
plot(pca.data$harmonics[2,], col=2, ylab='FPC2', ylim=c(-0.1,0.08))
# Plot of FPCs as perturbation of the mean
par(mfrow=c(1,2))
plot.pca.fd(pca.data)
pca.data$varprop
plot(pca.data$harmonics[1,], col=1, ylab='FPC1', ylim=c(-0.1,0.08))
plot(pca.data$harmonics[2,], col=2, ylab='FPC2', ylim=c(-0.1,0.08))
par(mfrow=c(1,2))
plot(pca.data$harmonics[1,], col=1, ylab='FPC1', ylim=c(-0.1,0.08))
plot(pca.data$harmonics[2,], col=2, ylab='FPC2', ylim=c(-0.1,0.08))
par(mfrow=c(1,2))
plot.pca.fd(pca.data)
par(mfrow=c(1,2))
plot(pca.data$scores[,1], pca.data$scores[,2], xlab="Scores FPC1",ylab="Scores FPC2",lwd=2)
points(pca.data$scores[n,1], pca.data$scores[n,2],col=2, lwd=4)
plot(pca.data$scores[,1], pca.data$scores[,2],type="n",xlab="Scores FPC1",
ylab="Scores FPC2")
text(pca.data$scores[,1], pca.data$scores[,2], dimnames(data)[[2]], cex=1)
head(data)
par(mfrow=c(1,1))
matplot(eval.1, type='l')
lines(eval.1[,35], lwd=4, col=2)
layout(cbind(1,2,3))
pca_L = pca.data
plot(pca_L$scores[,1],pca_L$scores[,2],xlab="Scores FPC1",ylab="Scores FPC2",lwd=2)
# points(pca_L$scores[12,1],pca_L$scores[12,2],col=2, lwd=4)
plot(pca_L$scores[,1],pca_L$scores[,3],xlab="Scores FPC1",ylab="Scores FPC3",lwd=2)
# points(pca_L$scores[12,1],pca_L$scores[12,3],col=2, lwd=4)
plot(pca_L$scores[,2],pca_L$scores[,3],xlab="Scores FPC2",ylab="Scores FPC3",lwd=2)
# points(pca_L$scores[12,2],pca_L$scores[12,3],col=2, lwd=4)
knitr::opts_knit$set(root.dir = normalizePath("G:/Il mio Drive/UNIVERSITA/APPLIED STATISTICS/LABS/Lab fda"))
rm( list = ls() )
list.files()
graphics.off() # chiude tutti i device grafici
cat("\014") #pulisci console
library(fda)
library(KernSmooth)
library(rgl)
# File watertemp.txt contains the mean daily water temperature registered at
# 132 monitoring stations in the Adriatic Sea, during the 365 days of 2017.
# The dataset also report the zone of the measurement (Deep, Medium or Surface water).
data = read.table('watertemp.txt', header=T)
knitr::opts_knit$set(root.dir = normalizePath("G:/Il mio Drive/UNIVERSITA/APPLIED STATISTICS/LABS/Lab fda"))
rm( list = ls() )
list.files()
graphics.off() # chiude tutti i device grafici
cat("\014") #pulisci console
library(fda)
library(KernSmooth)
library(rgl)
load("./growth.RData")
PGSctr
knitr::opts_knit$set(root.dir = normalizePath("G:/Il mio Drive/UNIVERSITA/APPLIED STATISTICS/LABS/Lab fda"))
rm( list = ls() )
list.files()
graphics.off() # chiude tutti i device grafici
cat("\014") #pulisci console
library(fda)
library(KernSmooth)
library(rgl)
library(fields)
help(CanadianWeather)
data_W <- CanadianWeather$dailyAv[,,1]
head(data_W)
dim(data_W)
matplot(data_W,type='l',main='Canadian temperature',xlab='Day',ylab='Temperature')
# First of all we smooth the data. We choose a Fourier basis
# (periodic). We need to set the dimension of the basis
time <- 1:365
basis.1 <- create.fourier.basis(rangeval=c(0,365),nbasis=365)
data_W.fd.1 <- Data2fd(y = data_W,argvals = time,basisobj = basis.1)
plot.fd(data_W.fd.1)
basis.2 <- create.fourier.basis(rangeval=c(0,365),nbasis=21)
data_W.fd.2 <- Data2fd(y = data_W,argvals = time,basisobj = basis.2)
plot.fd(data_W.fd.2)
basis.3 <- create.fourier.basis(rangeval=c(0,365),nbasis=109)
data_W.fd.3 <- Data2fd(y = data_W,argvals = time,basisobj = basis.3)
plot.fd(data_W.fd.3)
