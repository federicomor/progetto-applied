temp<-0
for (i in 1:g){
temp <- temp + cbind(mean_g[i,] - m) %*% rbind(mean_g[i,] - m)
}
B = 1/g*temp
B
# Covariance within groups (estimate)
Sp
s = min(g-1,p)
val.Sp = eigen(Sp)$val
vec.Sp = eigen(Sp)$vec
invSp.2 = 1/sqrt(val.Sp[1])*vec.Sp[,1]%*%t(vec.Sp[,1]) +
1/sqrt(val.Sp[2])*vec.Sp[,2]%*%t(vec.Sp[,2])
invSp.2
# Spectral decomposition of Sp^(-1/2) B Sp^(-1/2)
spec.dec = eigen(invSp.2 %*% B %*% invSp.2)
# First canonical coordinate
a1 = invSp.2 %*% spec.dec$vec[,1]
a1
# second canonical coordinate
a2 = invSp.2 %*% spec.dec$vec[,2]
a2
# compare with the output of lda():
lda.data
# Compute the canonical coordinates of the data
cc1.data = as.matrix(measures)%*%a1
cc2.data = as.matrix(measures)%*%a2
coord.cc = cbind(cc1.data,cc2.data)
# Compute the coordinates of the mean within groups along the canonical directions
cc.m <-list()
for (i in 1:g){
cc.m[i] = list(c(mean_g[i,]%*%a1, mean_g[i,]%*%a2))
}
# Assign data to groups
f.class=rep(0, n)
for(i in 1:n) # for each datum
{
# Compute the Euclidean distance of the i-th datum from mean within the groups
dist.m<-c()
for (j in 1:g){
dist.m <- c(dist.m,sqrt(sum((coord.cc[i,]-cc.m[[j]])^2)) )
}
# Assign the datum to the group whose mean is the nearest
f.class[i]=which.min(dist.m)
}
f.class
table(class.true=labels, class.assigned=f.class)
errors = n - sum(diag(table(class.true=labels, class.assigned=f.class)))
APERf = errors/length(labels)
APERf
x.new = c(2, 4,3,4)
# Compute the canonical coordinates
cc.new = c(x.new%*%a1, x.new%*%a2)
x.new = c(2, 4)
# Compute the canonical coordinates
cc.new = c(x.new%*%a1, x.new%*%a2)
# Compute the distance from the means
dist.m<-c()
for (j in 1:g){
dist.m <- c(dist.m,sqrt(sum((cc.new-cc.m[[j]])^2)) )
}
# Assign to the nearest mean
which.min(dist.m)
color.label=rep(rainbow(g), each=50)
par(mfrow=c(1,2))
plot(data[,1], data[,2], main='Plane of original coordinates',
xlab=name_col[1], ylab=name_col[2], pch=20, col=as.character(color.label))
legend("topleft", legend=tipi, fill=rainbow(g), cex=.7)
points(x.new[1], x.new[2], col='gold', pch=19)
for (i in 1:g){
points(mean_g[i,1], mean_g[i,2], pch=4,col=rainbow(g)[i] , lwd=2, cex=1.5)
}
plot(cc1.data[,1], cc2.data[,1], main='Plane of canonical coordinates',
xlab='first canonical coordinate', ylab='second canonical coordinate',
pch=20, col=as.character(color.label))
legend("topleft", legend=tipi, fill=rainbow(g), cex=.7)
points(cc.new[1], cc.new[2], col='gold', pch=19)
for (i in 1:g){
points(cc.m[[i]][1], cc.m[[i]][2], pch=4,col=rainbow(g)[i] , lwd=2, cex=1.5)
segments(cc.m[[i]][1], cc.m[[i]][2], cc.new[1], cc.new[2])
}
levels(color.label) = c('red','green','blue')
plot(cc1.data[,1], cc2.data[,1], main='Fisher discriminant analysis',
xlab='first canonical coordinate', ylab='second canonical coordinate',
pch=20, col=as.character(color.label))
legend("topleft", legend=levels(color.label), fill=c('red','green','blue'), cex=.7)
for(i in 1:g){
points(cc.m[[i]][1], cc.m[[i]][2], pch=4,col=rainbow(g)[i] , lwd=2, cex=1.5)
}
x.cc  = seq(min(cc1.data),max(cc1.data),len=200)
y.cc  = seq(min(cc2.data),max(cc2.data),len=200)
xy.cc = expand.grid(cc1=x.cc, cc2=y.cc)
z <- c()
for(i in 1:g){
z <- cbind(z,sqrt(rowSums(scale(xy.cc,cc.m[[i]],scale=FALSE)^2)))
}
if(g==2){
z1 <- z[,1] - z[,2]
z2 <- z[,2] - z[,1]
contour(x, y, matrix(z1, 200), levels=0, drawlabels=F, add=T)
contour(x, y, matrix(z2, 200), levels=0, drawlabels=F, add=T)
}
if(g == 3){
z1 = z[,1] - pmin(z[,2], z[,3]) # P_1*f_1(x,y)-max{P_j*f_j(x,y)}
z2 = z[,2] - pmin(z[,1], z[,3]) # P_2*f_2(x,y)-max{P_j*f_j(x,y)}
z3 = z[,3] - pmin(z[,1], z[,2]) # P_3*f_3(x,y)-max{P_j*f_j(x,y)}
contour(x, y, matrix(z1, 200), levels=0, drawlabels=F, add=T)
contour(x, y, matrix(z2, 200), levels=0, drawlabels=F, add=T)
contour(x, y, matrix(z3, 200), levels=0, drawlabels=F, add=T)
}
g
levels(color.label) = c('red','green','blue')
plot(cc1.data[,1], cc2.data[,1], main='Fisher discriminant analysis',
xlab='first canonical coordinate', ylab='second canonical coordinate',
pch=20, col=as.character(color.label))
legend("topleft", legend=levels(color.label), fill=c('red','green','blue'), cex=.7)
for(i in 1:g){
points(cc.m[[i]][1], cc.m[[i]][2], pch=4,col=rainbow(g)[i] , lwd=2, cex=1.5)
}
x.cc  = seq(min(cc1.data),max(cc1.data),len=200)
y.cc  = seq(min(cc2.data),max(cc2.data),len=200)
xy.cc = expand.grid(cc1=x.cc, cc2=y.cc)
z <- c()
for(i in 1:g){
z <- cbind(z,sqrt(rowSums(scale(xy.cc,cc.m[[i]],scale=FALSE)^2)))
}
if(g==2){
z1 <- z[,1] - z[,2]
z2 <- z[,2] - z[,1]
contour(x, y, matrix(z1, 200), levels=0, drawlabels=F, add=T)
contour(x, y, matrix(z2, 200), levels=0, drawlabels=F, add=T)
}
if(g == 3){
z1 = z[,1] - pmin(z[,2], z[,3]) # P_1*f_1(x,y)-max{P_j*f_j(x,y)}
z2 = z[,2] - pmin(z[,1], z[,3]) # P_2*f_2(x,y)-max{P_j*f_j(x,y)}
z3 = z[,3] - pmin(z[,1], z[,2]) # P_3*f_3(x,y)-max{P_j*f_j(x,y)}
contour(x, y, matrix(z1, 200), levels=0, drawlabels=F, add=T)
contour(x, y, matrix(z2, 200), levels=0, drawlabels=F, add=T)
contour(x, y, matrix(z3, 200), levels=0, drawlabels=F, add=T)
}
z
levels(color.label) = c('red','green','blue')
plot(cc1.data[,1], cc2.data[,1], main='Fisher discriminant analysis',
xlab='first canonical coordinate', ylab='second canonical coordinate',
pch=20, col=as.character(color.label))
legend("topleft", legend=levels(color.label), fill=c('red','green','blue'), cex=.7)
for(i in 1:g){
points(cc.m[[i]][1], cc.m[[i]][2], pch=4,col=rainbow(g)[i] , lwd=2, cex=1.5)
}
x.cc  = seq(min(cc1.data),max(cc1.data),len=200)
y.cc  = seq(min(cc2.data),max(cc2.data),len=200)
xy.cc = expand.grid(cc1=x.cc, cc2=y.cc)
z <- c()
for(i in 1:g){
z <- cbind(z,sqrt(rowSums(scale(xy.cc,cc.m[[i]],scale=FALSE)^2)))
}
if(g==2){
z1 <- z[,1] - z[,2]
z2 <- z[,2] - z[,1]
contour(x, y, matrix(z[,1], 200), levels=0, drawlabels=F, add=T)
contour(x, y, matrix(z[,2], 200), levels=0, drawlabels=F, add=T)
}
if(g == 3){
z1 = z[,1] - pmin(z[,2], z[,3]) # P_1*f_1(x,y)-max{P_j*f_j(x,y)}
z2 = z[,2] - pmin(z[,1], z[,3]) # P_2*f_2(x,y)-max{P_j*f_j(x,y)}
z3 = z[,3] - pmin(z[,1], z[,2]) # P_3*f_3(x,y)-max{P_j*f_j(x,y)}
contour(x.cc, y.cc, matrix(z[,1], 200), levels=0, drawlabels=F, add=T)
contour(x.cc, y.cc, matrix(z[,2], 200), levels=0, drawlabels=F, add=T)
contour(x.cc, y.cc, matrix(z[,3], 200), levels=0, drawlabels=F, add=T)
}
levels(color.label) = c('red','green','blue')
plot(cc1.data[,1], cc2.data[,1], main='Fisher discriminant analysis',
xlab='first canonical coordinate', ylab='second canonical coordinate',
pch=20, col=as.character(color.label))
legend("topleft", legend=levels(color.label), fill=c('red','green','blue'), cex=.7)
for(i in 1:g){
points(cc.m[[i]][1], cc.m[[i]][2], pch=4,col=rainbow(g)[i] , lwd=2, cex=1.5)
}
x.cc  = seq(min(cc1.data),max(cc1.data),len=200)
y.cc  = seq(min(cc2.data),max(cc2.data),len=200)
xy.cc = expand.grid(cc1=x.cc, cc2=y.cc)
z <- c()
for(i in 1:g){
z <- cbind(z,sqrt(rowSums(scale(xy.cc,cc.m[[i]],scale=FALSE)^2)))
}
if(g==2){
z1 <- z[,1] - z[,2]
z2 <- z[,2] - z[,1]
contour(x, y, matrix(z1, 200), levels=0, drawlabels=F, add=T)
contour(x, y, matrix(z2, 200), levels=0, drawlabels=F, add=T)
}
if(g == 3){
z1 = z[,1] - pmin(z[,2], z[,3]) # P_1*f_1(x,y)-max{P_j*f_j(x,y)}
z2 = z[,2] - pmin(z[,1], z[,3]) # P_2*f_2(x,y)-max{P_j*f_j(x,y)}
z3 = z[,3] - pmin(z[,1], z[,2]) # P_3*f_3(x,y)-max{P_j*f_j(x,y)}
contour(x.cc, y.cc, matrix(z1, 200), levels=0, drawlabels=F, add=T)
contour(x.cc, y.cc, matrix(z2, 200), levels=0, drawlabels=F, add=T)
contour(x.cc, y.cc, matrix(z3, 200), levels=0, drawlabels=F, add=T)
}
plot(measures[,1:2], main='Projection on the canonical directions',
xlab=name_col[1], ylab=name_col[2], pch=20
# ,xlim=c(-3,8), ylim=c(-3,7)
)
for(i in 1:g){
points(data[ig[[i]],], col=rainbow(g)[i], pch=20)
}
legend('topleft', legend=tipi, fill=rainbow(g), cex=.7)
points(mean_g, pch=4,col=rainbow(g) , lwd=2, cex=1.5)
abline(h=0,v=0, col='grey35')
arrows(x0=0, y0=0, x1=a1[1], y1=a1[2], length=.1)
arrows(x0=0, y0=0, x1=a2[1], y1=a2[2], length=.1)
text(a1[1], a1[2], 'a1',pos=3)
text(a2[1], a2[2], 'a2',pos=2)
abline(coef=c(0,(a1[2]/a1[1])), col='grey55',lty=2)
abline(coef=c(0,(a2[2]/a2[1])), col='grey55',lty=2)
points(cc1.data*a1[1]/(sum(a1^2)),cc1.data*a1[2]/(sum(a1^2)),
col=as.character(color.label))
points(cc2.data*a2[1]/(sum(a2^2)),cc2.data*a2[2]/(sum(a2^2)),
col=as.character(color.label))
plot(cc1.data[,1], cc2.data[,1], main='Coordinate system of the canonical coordinates',
xlab='first canonical coordinate', ylab='second canonical coordinate',
pch=20, col=as.character(color.label))
legend('topleft', legend=tipi, fill=rainbow(g), cex=.7)
for (i in 1:g){
points(cc.m[[i]][1], cc.m[[i]][2], pch=4,col=rainbow(g)[i] , lwd=2, cex=1.5)
}
plot(measures[,1:2], main='Projection on the canonical directions',
xlab=name_col[1], ylab=name_col[2], pch=20
# ,xlim=c(-3,8), ylim=c(-3,7)
)
for(i in 1:g){
points(measures[ig[[i]],], col=rainbow(g)[i], pch=20)
}
legend('topleft', legend=tipi, fill=rainbow(g), cex=.7)
points(mean_g, pch=4,col=rainbow(g) , lwd=2, cex=1.5)
abline(h=0,v=0, col='grey35')
arrows(x0=0, y0=0, x1=a1[1], y1=a1[2], length=.1)
arrows(x0=0, y0=0, x1=a2[1], y1=a2[2], length=.1)
text(a1[1], a1[2], 'a1',pos=3)
text(a2[1], a2[2], 'a2',pos=2)
abline(coef=c(0,(a1[2]/a1[1])), col='grey55',lty=2)
abline(coef=c(0,(a2[2]/a2[1])), col='grey55',lty=2)
points(cc1.data*a1[1]/(sum(a1^2)),cc1.data*a1[2]/(sum(a1^2)),
col=as.character(color.label))
points(cc2.data*a2[1]/(sum(a2^2)),cc2.data*a2[2]/(sum(a2^2)),
col=as.character(color.label))
plot(cc1.data[,1], cc2.data[,1], main='Coordinate system of the canonical coordinates',
xlab='first canonical coordinate', ylab='second canonical coordinate',
pch=20, col=as.character(color.label))
legend('topleft', legend=tipi, fill=rainbow(g), cex=.7)
for (i in 1:g){
points(cc.m[[i]][1], cc.m[[i]][2], pch=4,col=rainbow(g)[i] , lwd=2, cex=1.5)
}
plot(cc1.data[,1], cc2.data[,1], main='Coordinate system of the canonical coordinates',
xlab='first canonical coordinate', ylab='second canonical coordinate',
pch=20, col=as.character(color.label))
legend('topleft', legend=tipi, fill=rainbow(g), cex=.7)
for (i in 1:g){
points(cc.m[[i]][1], cc.m[[i]][2], pch=4,col=rainbow(g)[i] , lwd=2, cex=1.5)
}
plot(measures[,1:2], main='Projection on the canonical directions',
xlab=name_col[1], ylab=name_col[2], pch=20
# ,xlim=c(-3,8), ylim=c(-3,7)
)
for(i in 1:g){
points(measures[ig[[i]],], col=rainbow(g)[i], pch=20)
}
legend('topleft', legend=tipi, fill=rainbow(g), cex=.7)
points(mean_g, pch=4,col=rainbow(g) , lwd=2, cex=1.5)
abline(h=0,v=0, col='grey35')
arrows(x0=0, y0=0, x1=a1[1], y1=a1[2], length=.1)
arrows(x0=0, y0=0, x1=a2[1], y1=a2[2], length=.1)
text(a1[1], a1[2], 'a1',pos=3)
text(a2[1], a2[2], 'a2',pos=2)
abline(coef=c(0,(a1[2]/a1[1])), col='grey55',lty=2)
abline(coef=c(0,(a2[2]/a2[1])), col='grey55',lty=2)
points(cc1.data*a1[1]/(sum(a1^2)),cc1.data*a1[2]/(sum(a1^2)),
col=as.character(color.label))
points(cc2.data*a2[1]/(sum(a2^2)),cc2.data*a2[2]/(sum(a2^2)),
col=as.character(color.label))
plot(measures[,1:2], main='Projection on the canonical directions',
xlab=name_col[1], ylab=name_col[2], pch=20
,xlim=c(-3,8), ylim=c(-3,7)
)
for(i in 1:g){
points(measures[ig[[i]],], col=rainbow(g)[i], pch=20)
}
legend('topleft', legend=tipi, fill=rainbow(g), cex=.7)
points(mean_g, pch=4,col=rainbow(g) , lwd=2, cex=1.5)
abline(h=0,v=0, col='grey35')
arrows(x0=0, y0=0, x1=a1[1], y1=a1[2], length=.1)
arrows(x0=0, y0=0, x1=a2[1], y1=a2[2], length=.1)
text(a1[1], a1[2], 'a1',pos=3)
text(a2[1], a2[2], 'a2',pos=2)
abline(coef=c(0,(a1[2]/a1[1])), col='grey55',lty=2)
abline(coef=c(0,(a2[2]/a2[1])), col='grey55',lty=2)
points(cc1.data*a1[1]/(sum(a1^2)),cc1.data*a1[2]/(sum(a1^2)),
col=as.character(color.label))
points(cc2.data*a2[1]/(sum(a2^2)),cc2.data*a2[2]/(sum(a2^2)),
col=as.character(color.label))
plot(cc1.data[,1], cc2.data[,1], main='Coordinate system of the canonical coordinates',
xlab='first canonical coordinate', ylab='second canonical coordinate',
pch=20, col=as.character(color.label))
legend('topleft', legend=tipi, fill=rainbow(g), cex=.7)
for (i in 1:g){
points(cc.m[[i]][1], cc.m[[i]][2], pch=4,col=rainbow(g)[i] , lwd=2, cex=1.5)
}
measures
plot(measures[,1:2], main='Projection on the canonical directions',
xlab=name_col[1], ylab=name_col[2], pch=20
#,xlim=c(-3,8), ylim=c(-3,7)
)
for(i in 1:g){
points(measures[ig[[i]],], col=rainbow(g)[i], pch=20)
}
legend('topleft', legend=tipi, fill=rainbow(g), cex=.7)
points(mean_g, pch=4,col=rainbow(g) , lwd=2, cex=1.5)
abline(h=0,v=0, col='grey35')
arrows(x0=0, y0=0, x1=a1[1], y1=a1[2], length=.1)
arrows(x0=0, y0=0, x1=a2[1], y1=a2[2], length=.1)
text(a1[1], a1[2], 'a1',pos=3)
text(a2[1], a2[2], 'a2',pos=2)
abline(coef=c(0,(a1[2]/a1[1])), col='grey55',lty=2)
abline(coef=c(0,(a2[2]/a2[1])), col='grey55',lty=2)
points(cc1.data*a1[1]/(sum(a1^2)),cc1.data*a1[2]/(sum(a1^2)),
col=as.character(color.label))
points(cc2.data*a2[1]/(sum(a2^2)),cc2.data*a2[2]/(sum(a2^2)),
col=as.character(color.label))
plot(cc1.data[,1], cc2.data[,1], main='Coordinate system of the canonical coordinates',
xlab='first canonical coordinate', ylab='second canonical coordinate',
pch=20, col=as.character(color.label))
legend('topleft', legend=tipi, fill=rainbow(g), cex=.7)
for (i in 1:g){
points(cc.m[[i]][1], cc.m[[i]][2], pch=4,col=rainbow(g)[i] , lwd=2, cex=1.5)
}
plot(measures[,1:2], main='Projection on the canonical directions',
xlab=name_col[1], ylab=name_col[2], pch=20
,xlim=c(-3,8), ylim=c(-3,7)
)
for(i in 1:g){
points(measures[ig[[i]],], col=rainbow(g)[i], pch=20)
}
legend('topleft', legend=tipi, fill=rainbow(g), cex=.7)
points(mean_g, pch=4,col=rainbow(g) , lwd=2, cex=1.5)
abline(h=0,v=0, col='grey35')
arrows(x0=0, y0=0, x1=a1[1], y1=a1[2], length=.1)
arrows(x0=0, y0=0, x1=a2[1], y1=a2[2], length=.1)
text(a1[1], a1[2], 'a1',pos=3)
text(a2[1], a2[2], 'a2',pos=2)
abline(coef=c(0,(a1[2]/a1[1])), col='grey55',lty=2)
abline(coef=c(0,(a2[2]/a2[1])), col='grey55',lty=2)
points(cc1.data*a1[1]/(sum(a1^2)),cc1.data*a1[2]/(sum(a1^2)),
col=as.character(color.label))
points(cc2.data*a2[1]/(sum(a2^2)),cc2.data*a2[2]/(sum(a2^2)),
col=as.character(color.label))
plot(cc1.data[,1], cc2.data[,1], main='Coordinate system of the canonical coordinates',
xlab='first canonical coordinate', ylab='second canonical coordinate',
pch=20, col=as.character(color.label))
legend('topleft', legend=tipi, fill=rainbow(g), cex=.7)
for (i in 1:g){
points(cc.m[[i]][1], cc.m[[i]][2], pch=4,col=rainbow(g)[i] , lwd=2, cex=1.5)
}
knitr::opts_knit$set(root.dir = normalizePath("G:/Il mio Drive/UNIVERSITA/APPLIED STATISTICS/LABS/Lab fda"))
rm( list = ls() )
list.files()
graphics.off() # chiude tutti i device grafici
cat("\014") #pulisci console
library(fda)
library(KernSmooth)
library(rgl)
load("./growth.RData")
plot(hgtfhatfd, xlim=c(1,18), lty=1, cex=2, xlab="Age", ylab="Growth (cm)")
plot(velocfdUN, xlim=c(3,18),  lty=1, cex=2, xlab="Age", ylab="Velocity (cm/yr)")
lines(mean(velocfdUN),lwd=3,xlim=c(3,18))
plot(accelfdUN, xlim=c(3,18), ylim=c(-4,3), lty=1, cex=2, xlab="Age", ylab="Acceleration (cm/yr/yr)")
lines(mean(accelfdUN),lwd=3)
index  = 1:102
nindex = length(index)
ageval = seq(8.5,15,len=nindex)
# cliccare sul grafico per avanzare
PGSctr = rep(0,ncasef)
op = par(ask=TRUE)
for (icase in 1:ncasef) {
accveci = eval.fd(ageval, accelfdUN[icase])
aup     = accveci[2:nindex]
adn     = accveci[1:(nindex-1)]
indx    = (1:102)[adn*aup < 0 & adn > 0]
plot(ageval[2:nindex],aup,"p",
xlim=c(7.9,18), ylim=c(-6,4))
lines(c(8,18),c(0,0),lty=2)
for (j in 1:length(indx)) {
indxj = indx[j]
aupj  = aup[indxj]
adnj  = adn[indxj]
agej  = ageval[indxj] + 0.1*(adnj/(adnj-aupj))
if (j == length(indx)) {
PGSctr[icase] = agej
lines(c(agej,agej),c(-4,4),lty=1)
} else {
lines(c(agej,agej),c(-4,4),lty=3)
}
}
title(paste('Case ',icase))
}
par(op)
PGSctr
PGSctrmean = mean(PGSctr)
PGSctrmean
matplot(rbind(rep(1,len=54),rep(PGSctrmean,len=54),rep(18,len=54)),rbind(rep(1,len=54),PGSctr,rep(18,len=54)),type="l",xlab="Observed Age", ylab="Registered Age")
abline(v=PGSctrmean)
wbasisLM = create.bspline.basis(c(1,18), 4, 3, c(1,PGSctrmean,18))
WfdLM    = fd(matrix(0,4,1),wbasisLM)
WfdParLM = fdPar(WfdLM,1,1e-12)
regListLM = landmarkreg(accelfdUN, PGSctr, PGSctrmean,
WfdParLM, TRUE)
accelfdUN
PGSctr
PGSctrmean
WfdParLM
knitr::opts_knit$set(root.dir = normalizePath("G:/Il mio Drive/UNIVERSITA/APPLIED STATISTICS/LABS/Lab fda"))
rm( list = ls() )
list.files()
graphics.off() # chiude tutti i device grafici
cat("\014") #pulisci console
library(fda)
library(KernSmooth)
library(rgl)
library(fields)
help(CanadianWeather)
data_W <- CanadianWeather$dailyAv[,,1]
head(data_W)
dim(data_W)
matplot(data_W,type='l',main='Canadian temperature',xlab='Day',ylab='Temperature')
# First of all we smooth the data. We choose a Fourier basis
# (periodic). We need to set the dimension of the basis
time <- 1:365
basis.1 <- create.fourier.basis(rangeval=c(0,365),nbasis=365)
data_W.fd.1 <- Data2fd(y = data_W,argvals = time,basisobj = basis.1)
plot.fd(data_W.fd.1)
basis.2 <- create.fourier.basis(rangeval=c(0,365),nbasis=21)
data_W.fd.2 <- Data2fd(y = data_W,argvals = time,basisobj = basis.2)
plot.fd(data_W.fd.2)
basis.3 <- create.fourier.basis(rangeval=c(0,365),nbasis=109)
data_W.fd.3 <- Data2fd(y = data_W,argvals = time,basisobj = basis.3)
plot.fd(data_W.fd.3)
par(mfrow=c(2,3))
#mean
plot.fd(data_W.fd.1)
lines(mean.fd(data_W.fd.1),lwd=3)
plot.fd(data_W.fd.2)
lines(mean.fd(data_W.fd.2),lwd=2)
plot.fd(data_W.fd.3)
lines(mean.fd(data_W.fd.3),lwd=2)
# covariance
eval.1 <- eval.fd(time,data_W.fd.1)
image.plot(time,time,(cov(t(eval.1))[1:365,]))
eval.2 <- eval.fd(time,data_W.fd.2)
image.plot(time,time,(cor(t(eval.2))[1:365,]))
eval.3 <- eval.fd(time,data_W.fd.3)
image.plot(time,time,(cov(t(eval.3))[1:365,]))
help(pca.fd)
plot.fd(data_W.fd.1,ylab='temperature')
pca_W.1 <- pca.fd(data_W.fd.1,nharm=5,centerfns=TRUE)
layout(cbind(1,2))
plot(pca_W.1$harmonics[1,],col=1,ylab='FPC1',ylim=c(-0.1,0.08))
abline(h=0,lty=2)
plot(pca_W.1$harmonics[2,],col=2,ylab='FPC2',ylim=c(-0.1,0.08))
# plot of the FPCs as perturbation of the mean
media <- mean.fd(data_W.fd.1)
plot(media,lwd=2,ylim=c(-25,20),ylab='temperature',main='FPC1')
lines(media+pca_W.1$harmonics[1,]*sqrt(pca_W.1$values[1]), col=2)
lines(media-pca_W.1$harmonics[1,]*sqrt(pca_W.1$values[1]), col=3)
# variation in amplitude (more in winter than in summer)
plot(media,lwd=2,ylim=c(-20,20),ylab='temperature',main='FPC2')
lines(media+pca_W.1$harmonics[2,]*sqrt(pca_W.1$values[2]), col=2)
lines(media-pca_W.1$harmonics[2,]*sqrt(pca_W.1$values[2]), col=3)
# temperate climate or not
par(mfrow=c(1,2))
plot(pca_W.1, nx=100, pointplot=TRUE, harm=c(1,2), expand=0, cycle=FALSE)
plot.fd(data_W.fd.2)
pca_W.2 <- pca.fd(data_W.fd.2,nharm=5,centerfns=TRUE)
layout(cbind(1,2))
plot(pca_W.2$harmonics[1,],col=1,ylab='FPC1',ylim=c(-0.1,0.08))
abline(h=0,lty=2)
plot(pca_W.2$harmonics[2,],col=2,ylab='FPC2',ylim=c(-0.1,0.08))
# plot of the FPCs as perturbation of the mean
media <- mean.fd(data_W.fd.2)
plot(media,lwd=2,ylim=c(-25,20),ylab='temperature',main='PC1')
lines(media+pca_W.2$harmonics[1,]*sqrt(pca_W.2$values[1]), col=2)
lines(media-pca_W.2$harmonics[1,]*sqrt(pca_W.2$values[1]), col=3)
plot(media,lwd=2,ylim=c(-20,20),ylab='temperature',main='PC2')
lines(media+pca_W.2$harmonics[2,]*sqrt(pca_W.2$values[2]), col=2)
lines(media-pca_W.2$harmonics[2,]*sqrt(pca_W.2$values[2]), col=3)
# similar interpretations as before
par(mfrow=c(1,2))
plot(pca_W.1$scores[,1],pca_W.1$scores[,2],xlab="Scores FPC1",ylab="Scores FPC2",lwd=2)
points(pca_W.1$scores[35,1],pca_W.1$scores[35,2],col=2, lwd=4)
plot(pca_W.1$scores[,1],pca_W.1$scores[,2],type="n",xlab="Scores FPC1",
ylab="Scores FPC2",xlim=c(-400,250))
text(pca_W.1$scores[,1],pca_W.1$scores[,2],dimnames(data_W)[[2]], cex=1)
layout(1)
matplot(eval.1,type='l')
lines(eval.1[,35],lwd=4, col=2) #temperature profile for Resolute
coord <- CanadianWeather$coordinates
coord[,2] <- -coord[,2]
plot(coord[,2:1],col=0)
help(lip)
data_L <- lip
time <- seq(0,350,by=7)
matplot(time,data_L,type='l',main='Lip data',ylab='Position',
xlab='Time (millisec.)')
setwd("C:/Users/modin/Desktop/Ettore/UNIVERSITA/PISA_PROJECT/progetto-applied/src/cluster-analysis")
